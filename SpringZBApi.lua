return {
	Script = {
		type = 'lib',
		description = [[Script ]],
		childs = {
			Kill = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetName = {
				type = 'function',
				returns = 'string luaInstanceName',
				description = [[Lua_System; Returns the luaInstanceName (e.g. "LuaUI", "LuaRules", "LuaGaia", ...). ]],
				args = '',
			},
			GetSynced = {
				type = 'function',
				returns = 'bool is_synced',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetFullCtrl = {
				type = 'function',
				returns = 'bool has_fullctrl',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetFullRead = {
				type = 'function',
				returns = 'bool has_fullread',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetCtrlTeam = {
				type = 'function',
				returns = 'number ctrl_teamID',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetReadTeam = {
				type = 'function',
				returns = 'number read_teamID',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetReadAllyTeam = {
				type = 'function',
				returns = 'number read_allyTeamID',
				description = [[Lua_System; No description available ]],
				args = '',
			},
			GetSelectTeam = {
				type = 'function',
				returns = 'number select_teamID',
				description = [[Lua_System; Defines which teamunits can be selected via Spring.SelectUnitMap/Spring.SelectUnitArray. ]],
				args = '',
			},
			GetGlobal = {
				type = 'function',
				returns = 'nil | table globalEnv',
				description = [[Lua_System; Returns nil if not in dev-mode. ]],
				args = '',
			},
			GetRegistry = {
				type = 'function',
				returns = 'nil | table registryEnv',
				description = [[Lua_System; Returns nil if not in dev-mode. ]],
				args = '',
			},
			GetCallInList = {
				type = 'function',
				returns = 'table known_callins',
				description = [[Lua_System; Known CallIns are: ]],
				args = '',
			},
			IsEngineMinVersion = {
				type = 'function',
				args = 'major  [, minor  [, commits ] ] ',
				returns = 'nil | boolean isMinVersion',
				description = [[Lua_System; No description available ]],
			},
			AddActionFallback = {
				type = 'function',
				args = 'string command, string help',
				returns = 'nil | boolean ???',
				description = [[Lua_System; No description available ]],
			},
			RemoveActionFallback = {
				type = 'function',
				args = 'string command',
				returns = 'nil | boolean ???',
				description = [[Lua_System; No description available ]],
			},
			UpdateCallIn = {
				type = 'function',
				args = 'string callin_name',
				returns = 'nil',
				description = [[Lua_System; No description available ]],
			},
			SetWatchFeature = {
				type = 'function',
				args = 'number featureDefID, boolean enable',
				returns = 'nil',
				description = [[Lua_System; Enables the `UnitFeatureCollision` callin for a specific [ [Gamedev:FeatureDefs|FeatureDef] ]. ]],
			},
			GetWatchFeature = {
				type = 'function',
				args = 'number featureDefID',
				returns = 'nil | boolean enabled',
				description = [[Lua_System; No description available ]],
			},
			SetWatchUnit = {
				type = 'function',
				args = 'number unitDefID, boolean enable',
				returns = 'nil',
				description = [[Lua_System; Enables the `UnitUnitCollision`, `UnitFeatureCollision` and `UnitMoveFailed` callins for a specific [ [Gamedev:UnitDefs|UnitDef] ]. ]],
			},
			GetWatchUnit = {
				type = 'function',
				args = 'number unitDefID',
				returns = 'nil | boolean enabled',
				description = [[Lua_System; No description available ]],
			},
			SetWatchWeapon = {
				type = 'function',
				args = 'number weaponDefID, boolean enable',
				returns = 'nil',
				description = [[Lua_System; Enables the `Explosion` and (as of 0.83+) `ProjectileCreated` and `ProjectileDestroyed` callins for a specific WeaponDef. ]],
			},
			GetWatchWeapon = {
				type = 'function',
				args = 'number weaponDefID',
				returns = 'nil | boolean enabled',
				description = [[Lua_System; No description available ]],
			},
			PermitHelperAIs = {
				type = 'function',
				args = 'boolean permit',
				returns = 'nil',
				description = [[Lua_System; No description available ]],
			},
		},
	},
	Spring = {
		type = 'lib',
		description = [[Spring ]],
		childs = {
			SetShockFrontFactors = {
				type = 'function',
				args = 'number minArea, number minPower, number distAdj',
				returns = 'nil',
				description = [[Lua_System; No description available ]],
			},
			UpdateCallIn = {
				type = 'function',
				args = 'string callin_name',
				returns = 'nil',
				description = [[Lua_System; No description available ]],
			},
			KillTeam = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|83.0}} Will declare a team to be dead ( no further orders can be assigned to such teams's units ), Gaia team cannot be killed. ]],
			},
			GameOver = {
				type = 'function',
				args = 'number allyTeamID1, number allyTeamID2, ...',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|83.0}} Will declare game over, a list of winning allyteams can be passed, if undecided ( like when dropped from the host ) it should be empty ( no winner ), in the case of a draw with multiple winners, all should be listed. ]],
			},
			SetUnitRulesParam = {
				type = 'function',
				args = 'number unitID, string paramName, number|string paramValue  [, table losAccess ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Possible keys for the losAccess table are:
`private` : only readable by the ally (default)
`allied`  : readable by ally + ingame allied
`inlos`   : readable if the unit is in LOS
`inradar` : readable if the unit is in AirLOS
`public`  : readable by all
note: if one condition is fulfilled all beneath it are too (e.g. if an unit is in LOS it     can read params with `inradar=true` even if the param has `inlos=false`)
note2: all GameRulesParam are public, TeamRulesParams can just be `private`,`allied`     and/or `public`
note3: You can read RulesParams from '''any''' Lua enviroments! With those losAccess     policies you can limit their access. ]],
			},
			SetFeatureRulesParam = {
				type = 'function',
				args = 'number featureID, string paramName, number|string paramValue  [, table losAccess ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; New since 102.0.See above for further documentation of losAccess. ]],
			},
			SetTeamRulesParam = {
				type = 'function',
				args = 'number teamID, string paramName, number|string paramValue  [, table losAccess ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; See above for further documentation of losAccess. ]],
			},
			SetGameRulesParam = {
				type = 'function',
				args = 'string paramName, number|string paramValue  [, table losAccess ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; See above for further documentation of losAccess. ]],
			},
			AddTeamResource = {
				type = 'function',
				args = 'number teamID, string "metal" | "energy", number amount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Adds metal or energy resources to the specified team. ]],
			},
			UseTeamResource = {
				type = 'function',
				args = 'number teamID, string "metal" | "energy", number amount | { metal = number amount, energy = number amount }',
				returns = 'nil | bool hadEnough',
				description = [[Lua_SyncedCtrl; Consumes metal and/or energy resources of the specified team. ]],
			},
			SetTeamResource = {
				type = 'function',
				args = 'number teamID, string res, number amount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Possible values for res are:"m"  = metal"e"  = energy"ms"  = metal storage"es"  = energy storage ]],
			},
			SetTeamShareLevel = {
				type = 'function',
				args = 'number teamID, string "metal" | "energy", number amount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Changes the resource amount for a team beyond which resources aren't stored but transferred to other allied teams if possible. ]],
			},
			ShareTeamResource = {
				type = 'function',
				args = 'number teamID_src, number teamID_recv, string "metal" | "energy", number amount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Transfers resources between two teams. ]],
			},
			SetAlly = {
				type = 'function',
				args = 'number firstAllyTeamID, number secondAllyTeamID, bool ally',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|98.0}}Changes the value of the (one-sided) alliance between: firstAllyTeamID -> secondAllyTeamID. ]],
			},
			AssignPlayerToTeam = {
				type = 'function',
				args = 'number playerID, number teamID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|98.0}}Assigns a player to a team. ]],
			},
			SetGlobalLos = {
				type = 'function',
				args = 'number allyTeamID, bool globallos',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}}Changes access to global line of sight for a team and its allies. ]],
			},
			CreateUnit = {
				type = 'function',
				args = 'string "defName" | number  unitDefID, number x, number y, number z, string "facing" | number  facing, number teamID  [, bool build = false  [, bool flattenGround = true  [, number builderID ] ] ] ',
				returns = 'number unitID | nil (meaning unit was not created)',
				description = [[Lua_SyncedCtrl; Offmap positions are clamped! Use MoveCtrl to move to such positions.Possible values for facing are:"south" | "s" | 0"east"  | "e" | 1"north" | "n" | 2"west"  | "w" | 3If build is true, the unit is created in "being built" state with buildProgress = 0unitID and builderID are {{new|92.0}}, the former allowing to spawn a unit with a specific ID. ]],
			},
			DestroyUnit = {
				type = 'function',
				args = 'number unitID  [, bool selfd = false  [, bool reclaimed = false  [, number attackerID ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; selfd := Makes the unit act like it self-destructed.reclaimed := Don't show any DeathSequences, don't leave a wreckage. This does not give back the resources to the team! ]],
			},
			TransferUnit = {
				type = 'function',
				args = 'number unitID, number newTeamID  [, bool given = true ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; If given=false, the unit is captured. ]],
			},
			SetUnitCosts = {
				type = 'function',
				args = 'number unitID, {  [ buildTime = number amount ] ,  [ metalCost = number amount  ] ,  [ energyCost = number amount ]  }',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitTooltip = {
				type = 'function',
				args = 'number unitID, string "tooltip"',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitHealth = {
				type = 'function',
				args = 'number unitID, number health | {  [ health = number health ] ,  [ capture  = number capture  ] ,  [ paralyze = number paralyze ] ,  [ build    = number build ]  }',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitMaxHealth = {
				type = 'function',
				args = 'number unitID, number maxHealth',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AddUnitDamage = {
				type = 'function',
				args = 'number unitID, number damage  [, number paralyze = 0  [, number attackerID = -1  [, number weaponID = -1  [, number impulse_x  [, number impulse_y  [, number impulse_z ] ] ] ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; The number in the paralyze parameter equals to the paralyzetime in the WeaponDef. ]],
			},
			SetUnitStockpile = {
				type = 'function',
				args = 'number unitID  [, number stockpile  [, number buildPercent ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitExperience = {
				type = 'function',
				args = 'number unitID, number experience, number buildPercent',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitFuel = {
				type = 'function',
				args = 'number unitID, number fuel',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|101.0}} ]],
			},
			SetUnitCrashing = {
				type = 'function',
				args = 'number unitID, bool crashing',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; {{new|83.0}} ]],
			},
			SetUnitLineage = {
				type = 'function',
				args = 'number unitID, number teamID  [, bool isRoot ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|83.0}} ]],
			},
			SetUnitNeutral = {
				type = 'function',
				args = 'number unitID, bool neutral',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|83.0}} ]],
			},
			SetUnitTarget = {
				type = 'function',
				args = 'number unitID, number enemyUnitID | nil  [, bool dgun = false  [, bool userTarget = false  [, number weaponNum = -1 ] ] ] ',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; Defines a unit's target. Nil as 2nd argument drops the unit's current target.UserTarget & success new in version 95.0, setting nil target new in version 99.0, weaponNum new in version 102.0. ]],
			},
			SetUnitMaxRange = {
				type = 'function',
				args = 'number unitID, number maxRange',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitMass = {
				type = 'function',
				args = 'number unitID, number mass',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetUnitBlocking = {
				type = 'function',
				args = 'number unitID, bool isblocking, bool isSolidObjectCollidable, bool isProjectileCollidable, bool isRaySegmentCollidable, bool crushable, bool blockEnemyPushing, bool blockHeightChanges',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}}Changed parameters. ]],
			},
			SetUnitMetalExtraction = {
				type = 'function',
				args = 'number unitID, number depth  [, number range ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Parameter "depth" corresponds to metal extraction rate. Range value is similar to "extractsMetal" in unitDefs. ]],
			},
			SetUnitBuildSpeed = {
				type = 'function',
				args = 'number builderID, number buildSpeed  [, number repairSpeed  [, number reclaimSpeed [, number resurrectSpeed  [, number captureSpeed  [, number terraformSpeed ] ] ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitNanoPieces = {
				type = 'function',
				args = 'number builderID, table pieces',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|92.0}}This saves a lot of engine calls, by replacing: function script.QueryNanoPiece() return currentpiece endUse it! ]],
			},
			UnitAttach = {
				type = 'function',
				args = 'number transporterID, number passengerID, number pieceNum',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			UnitDetach = {
				type = 'function',
				args = 'number passengerID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			UnitDetachFromAir = {
				type = 'function',
				args = 'number passengerID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetUnitLoadingTransport = {
				type = 'function',
				args = 'number passengerID, number transportID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}}Disables collisions between the two units to allow colvol intersection during the approach. ]],
			},
			SetUnitPieceParent = {
				type = 'function',
				args = 'number unitID, number AlteredPiece, number ParentPiece',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}}Changes the pieces hierarchy of a unit by attaching a piece to a new parent. ]],
			},
			SetUnitPieceMatrix = {
				type = 'function',
				args = 'number unitID, number pieceNum, table  matrix',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|104.0}}Sets the local (i.e. parent-relative) matrix of the given piece if any of the first three elements are non-zero, and also blocks all script animations from modifying it until {0, 0, 0} is passed (matrix should be an array of 16 floats, but is not otherwise sanity-checked). ]],
			},
			SetUnitArmored = {
				type = 'function',
				args = 'number unitID, bool armored  [, number armorMultiple ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; armorMultiple new in version 0.83.x ]],
			},
			SetUnitShieldState = {
				type = 'function',
				args = 'number unitID  [, number weaponID = -1  [, bool enabled  [, number power ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitFlanking = {
				type = 'function',
				args = 'number unitID, string "dir", number  x, number  y, number  z',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitWeaponState = {
				type = 'function',
				args = 'number unitID, number weaponNum, string  key, number value',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitWeaponDamages = {
				type = 'function',
				args = 'number unitID, number weaponNum | string "selfDestruct" | string "explode", string key, number value',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetUnitCollisionVolumeData = {
				type = 'function',
				args = 'number unitID, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number vType, number tType, number Axis',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitPieceCollisionVolumeData = {
				type = 'function',
				args = 'number unitID, number pieceIndex, bool enable, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ  [, number volumeType  [, number primaryAxis ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; As of 101.0 this is 1-based piece index argument (was 0-based). ]],
			},
			SetUnitTravel = {
				type = 'function',
				args = 'number unitID, number travel  [, number travelPeriod ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitMoveGoal = {
				type = 'function',
				args = 'number unitID, number goalX, number goalY, number goalZ  [, number goalRadius  [, number moveSpeed  [, bool moveRaw ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Used by default commands to get in build-, attackrange etc.{{new|98.0}} moveRaw: [http://springrts.com/mantis/view.php?id=4412 allow unit to dumbly move to a coordinate without calculating path.] ]],
			},
			SetUnitLandGoal = {
				type = 'function',
				args = 'number unitID, number goalX, number goalY, number goalZ  [, number goalRadius ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}}Used in conjunction with {{name|Spring.UnitAttach}} et al. to re-implement old airbase & fuel system in Lua. ]],
			},
			ClearUnitGoal = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|102.0}} ]],
			},
			SetUnitPhysics = {
				type = 'function',
				args = 'number featureID, number posX, number posY, number posZ, number velX, number velY, number velZ, number rotX, number rotY, number rotZ, number dragX, number dragY, number dragZ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{New|95.0}} ]],
			},
			SetUnitPosition = {
				type = 'function',
				args = 'number unitID, number x, number z  [, bool alwaysAboveSea ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitDirection = {
				type = 'function',
				args = 'number unitID, number x, number y, number z',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|90.0}} ]],
			},
			SetUnitVelocity = {
				type = 'function',
				args = 'number unitID, number velX, number velY, number velZ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitRotation = {
				type = 'function',
				args = 'number unitID, number yaw, number pitch, number roll',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AddUnitImpulse = {
				type = 'function',
				args = 'number unitID, number x, number y, number z  [, number decayRate ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AddUnitSeismicPing = {
				type = 'function',
				args = 'number unitID, number pingSize',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			RemoveBuildingDecal = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitMidAndAimPos = {
				type = 'function',
				args = 'number unitID, number mpX, number mpY, number mpZ, number apX, number apY, number apZ  [, bool relative ] ',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; {{new|89.0}}mpx, mpy, mpz: New middle position of unitapx, apy, apz: New position that enemies aim at on this unitrelative: Are the new coordinates relative to world (false) or unit (true) coordinates? Also, note that apy is inverted! ]],
			},
			SetUnitRadiusAndHeight = {
				type = 'function',
				args = 'number unitID, number radius, number height',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; {{new|89.0}} ]],
			},
			UnitWeaponFire = {
				type = 'function',
				args = 'number unitID, number weaponID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			UnitWeaponHoldFire = {
				type = 'function',
				args = 'number unitID, number weaponID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitCloak = {
				type = 'function',
				args = 'number unitID, bool cloaked | number scriptCloak  [, bool decloakAbs | number decloakDistance ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; If the 2nd argument is a number, the value works like this:1:=normal cloak2:=for free cloak (cost no E)3:=for free + no decloaking (except the unit is stunned)4:=ultimative cloak (no ecost, no decloaking, no stunned decloak)The decloak distance is only changed:- if the 3th argument is a number or a boolean.- if the boolean is false it takes the default decloak distance for that unitdef,- if the boolean is true it takes the absolute value of it. ]],
			},
			SetUnitSonarStealth = {
				type = 'function',
				args = 'number unitID, bool sonarStealth',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitStealth = {
				type = 'function',
				args = 'number unitID, bool stealth',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitAlwaysVisible = {
				type = 'function',
				args = 'number unitID, bool alwaysVisible',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitLosMask = {
				type = 'function',
				args = 'number unitID, number allyTeam, number los  | table  losTypes',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; The 3rd argument is either the bit-and combination of the following numbers:LOS_INLOS     = 1LOS_INRADAR   = 2LOS_PREVLOS   = 4LOS_CONTRADAR = 8or a table of the following form:losTypes = {[los = boolean,][radar = boolean,][prevLos = boolean,][contRadar = boolean]} ]],
			},
			SetUnitLosState = {
				type = 'function',
				args = 'number unitID, number allyTeam, number los  | table  losTypes',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; See above for more info on the arguments. ]],
			},
			SetUnitSensorRadius = {
				type = 'function',
				args = 'number unitID, string  type, number radius',
				returns = 'nil | number newRadius',
				description = [[Lua_SyncedCtrl; Type can be:"los", "airLos", "radar", "sonar", "seismic", "radarJammer", "sonarJammer" ]],
			},
			SetRadarErrorParams = {
				type = 'function',
				args = 'number allyTeamID, number  allyteamErrorSize  [, number baseErrorSize  [, number baseErrorMult ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}} ]],
			},
			SetUnitPosErrorParams = {
				type = 'function',
				args = 'number unitID, number posErrorVector.x, number posErrorVector.y, number posErrorVector.z,, number posErrorDelta.x, number number posErrorDelta.y, number posErrorDelta.z  [, number nextPosErrorUpdate ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}} ]],
			},
			SetUnitResourcing = {
				type = 'function',
				args = 'number unitID, { res = number amount, ... }',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Possible values for res are: "[u|c][u|m][m|e]"unconditional | conditionaluse | makemetal | energy ]],
			},
			AddUnitResource = {
				type = 'function',
				args = 'number unitID, string  "m" | "e", number amount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			UseUnitResource = {
				type = 'function',
				args = 'number unitID, {  [ "m" | "metal" | "e" | "energy" ]  = amount, ... }',
				returns = 'nil | bool okay',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitHarvestStorage = {
				type = 'function',
				args = 'number unitID, number metal',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|97.0}}See also {{xtaglink|Gamedev:UnitDefs|harvestStorage}} UnitDef tag. ]],
			},
			CreateFeature = {
				type = 'function',
				args = 'string "defName" | number featureDefID, number x, number y, number z  [, number heading  [, number AllyTeamID  [, number featureID ] ] ] ',
				returns = 'number featureID',
				description = [[Lua_SyncedCtrl;  ]],
			},
			DestroyFeature = {
				type = 'function',
				args = 'number featureDefID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			TransferFeature = {
				type = 'function',
				args = 'number featureDefID, number teamID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureHealth = {
				type = 'function',
				args = 'number featureID, number health',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureResources = {
				type = 'function',
				args = 'number featureID, number metal, number energy  [, number reclaimTime  [, number reclaimLeft ] {rbracket}}',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|104.0}} ]],
			},
			SetFeatureReclaim = {
				type = 'function',
				args = 'number featureID, number reclaimLeft',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureResurrect = {
				type = 'function',
				args = 'number featureID, number unitDefID | string unitDefName  [, number facing | string "facing"  [, number progress ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|104.0}} Second param can now be a number id instead of a string name, this also allows cancelling ressurection by passing {{value|-1}}. The level of progress can now be set via the additional 4th param.Possible values for facing are:"south" | "s" | 0"east"  | "e" | 1"north" | "n" | 2"west"  | "w" | 3 ]],
			},
			SetFeaturePosition = {
				type = 'function',
				args = 'number featureID, number x, number y, number z  [, bool snapToGround ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureDirection = {
				type = 'function',
				args = 'number featureID, number dirX, number dirY, number dirZ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureRotation = {
				type = 'function',
				args = 'number featureID, number rotX, number rotY, number rotZ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetFeatureVelocity = {
				type = 'function',
				args = 'number featureID, number velX, number velY, number velZ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{New|95.0}} ]],
			},
			SetFeatureMoveCtrl = {
				type = 'function',
				args = 'number featureID  [, bool enable  [, number* args ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Use this callout to control feature movement. The number* arguments are parsed as follows and all optional:If enable is true: [, velVector(x,y,z) -- initial velocity for feature [, accVector(x,y,z) -- acceleration added every frame] ] If enable is false: [, velocityMask(x,y,z) -- dimensions in which velocity is allowed to build when not using MoveCtrl [,  impulseMask(x,y,z) -- dimensions in which impulse is allowed to apply when not using MoveCtrl [, movementMask(x,y,z) -- dimensions in which feature is allowed to move when not using MoveCtrl] ] ] As of spring 103.0 it is necessary to unlock feature movement on x,z axis before changing feature physics. For example use "Spring.SetFeatureMoveCtrl(featureID,false,1,1,1,1,1,1,1,1,1)" to unlock all movement prior to making SetFeatureVelocity calls. ]],
			},
			SetFeatureNoSelect = {
				type = 'function',
				args = 'number featureID, bool noSelect',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureAlwaysVisible = {
				type = 'function',
				args = 'number featureID, bool enable',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetFeatureCollisionVolumeData = {
				type = 'function',
				args = 'number featureID, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number vType, number tType, number Axis',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Check Spring.SetUnitCollisionVolumeData for further explanation of the arguments. ]],
			},
			SetFeaturePieceCollisionVolumeData = {
				type = 'function',
				args = 'number featureID, number pieceIndex, bool enable, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number Axis, number volumeType  [, number primaryAxis ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetFeatureMidAndAimPos = {
				type = 'function',
				args = 'number featureID, number mpX, number mpY, number mpZ, number apX, number apY, number apZ  [, bool relative',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; {{new|89.0}}Check Spring.SetUnitMidAndAimPos for further explanation of the arguments. ]],
			},
			SetFeatureRadiusAndHeight = {
				type = 'function',
				args = 'number featureID, number radius, number height',
				returns = 'bool success',
				description = [[Lua_SyncedCtrl; {{new|89.0}} ]],
			},
			SetFeatureMass = {
				type = 'function',
				args = 'number featureID, number mass',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetFeatureBlocking = {
				type = 'function',
				args = 'number featureID, boolean isBlocking, boolean isSolidObjectCollidable, boolean isProjectileCollidable, boolean isRaySegmentCollidable, boolean crushable, boolean blockEnemyPushing, boolean blockHeightChanges',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}} Changed parameters. ]],
			},
			CallCOBScript = {
				type = 'function',
				args = 'number unitID, number funcID | string funcName, number retArgs, COBArg1, COBArg2, ...',
				returns = 'nil | number returnValue, number retArg1, number retArg2, ...',
				description = [[Lua_SyncedCtrl;  ]],
			},
			GetCOBScriptID = {
				type = 'function',
				args = 'number unitID, string funcName',
				returns = 'nil | number funcID',
				description = [[Lua_SyncedCtrl;  ]],
			},
			GetUnitCOBValue = {
				type = 'function',
				args = 'number unitID  [, bool splitData=false ] , number COBValue  [, number param1  [, number param2  [, number param3  [, number param4 ] ] ] ] ',
				returns = 'number result | number result1, number result2',
				description = [[Lua_SyncedCtrl; Note: Don't use Spring. [Get|Set] UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!You can find the possible values for `COBValue` in [ [Lua_ConstCOB#Get.2FSet|Lua_ConstCOB] ]. Also see [ [Animation-CobConstants#Custom_Variables|Custom_Variables] ]. ]],
			},
			SetUnitCOBValue = {
				type = 'function',
				args = 'number unitID, number COBValue, number param1  [, number param2 ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Note: Don't use Spring. [Get|Set] UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!You can find the possible values for `COBValue` in [ [Lua_ConstCOB#Get.2FSet|Lua_ConstCOB] ]. Also see [ [Animation-CobConstants#Custom_Variables|Custom_Variables] ]. ]],
			},
			GiveOrderToUnit = {
				type = 'function',
				args = 'number unitID, number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"}',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			GiveOrderToUnitMap = {
				type = 'function',
				args = 'table unitMap = {  [ = arg1, etc... }, number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"}',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			GiveOrderToUnitArray = {
				type = 'function',
				args = 'table unitArray = {  [ = number unitID, etc... }, number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"}',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			GiveOrderArrayToUnitMap = {
				type = 'function',
				args = 'table unitMap = {  [ = arg1, etc... }, table orderArray = { number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"} }',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			GiveOrderArrayToUnitArray = {
				type = 'function',
				args = 'table unitArray = {  [ = number unitID, etc... }, table orderArray = { number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"} }  [, bool pairwise ] ',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl."pairwise" paramater ({{new|89.0}}) is used to send multiple units a single individual command. ]],
			},
			AddGrass = {
				type = 'function',
				args = 'number x, number z',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			RemoveGrass = {
				type = 'function',
				args = 'number x, number z',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			LevelHeightMap = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number height',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AdjustHeightMap = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number height',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; (heightmap[x][z] += height;) ]],
			},
			RevertHeightMap = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number origFactor',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetHeightMapFunc = {
				type = 'function',
				args = 'lua_function  [, arg1  [, arg2  [, ... ] ] ] ',
				returns = 'nil | number absTotalHeightMapAmountChanged',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AddHeightMap = {
				type = 'function',
				args = 'number x, number z, number height',
				returns = 'nil | number newHeight',
				description = [[Lua_SyncedCtrl; Can only be called in SetHeightMapFunc() ]],
			},
			SetHeightMap = {
				type = 'function',
				args = 'number x, number z, number height  [, number terraform = 1 ] ',
				returns = 'nil | number absHeightDiff',
				description = [[Lua_SyncedCtrl; Can only be called in SetHeightMapFunc(). The terraform argument is a scaling factor:
If =0 nothing will be changed (the terraform starts) and if =1 the terraform will be finished. ]],
			},
			LevelSmoothMesh = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number height',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AdjustSmoothMesh = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number height',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			RevertSmoothMesh = {
				type = 'function',
				args = 'number x1, number z1  [, number x2, number z2 ] , number origFactor',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetSmoothMeshFunc = {
				type = 'function',
				args = 'lua_function  [, arg1  [, arg2  [, ... ] ] ] ',
				returns = 'nil | number absTotalHeightMapAmountChanged',
				description = [[Lua_SyncedCtrl;  ]],
			},
			AddSmoothMesh = {
				type = 'function',
				args = 'number x, number z, number height',
				returns = 'nil | number newHeight',
				description = [[Lua_SyncedCtrl; Can only be called in SetSmoothMeshFunc(). ]],
			},
			SetSmoothMesh = {
				type = 'function',
				args = 'number x, number z, number height  [, number terraform = 1 ] ',
				returns = 'nil | number absHeightDiff',
				description = [[Lua_SyncedCtrl; Can only be called in SetSmoothMeshFunc(). ]],
			},
			SetMapSquareTerrainType = {
				type = 'function',
				args = 'number x, number z, number newType',
				returns = 'nil | number oldType',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetTerrainTypeData = {
				type = 'function',
				args = 'number typeIndex  [, number speedTanks = nil  [, number speedKBOts = nil  [, number speedHovers = nil  [, number speedShips = nil ] ] ] ] ',
				returns = 'nil | bool true',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetSquareBuildingMask = {
				type = 'function',
				args = 'number x, number z, number mask',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|103.0}} ]],
			},
			SetMetalAmount = {
				type = 'function',
				args = 'number x, number z, number metalAmount',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|83.0}}x & z coords are in worldspace/16. metalAmount must be between 0 and 255*maxMetal (with maxMetal from the .smd or mapinfo.lua). ]],
			},
			EditUnitCmdDesc = {
				type = 'function',
				args = 'number unitID, number cmdDescID, table cmdArray',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			InsertUnitCmdDesc = {
				type = 'function',
				args = 'number unitID  [, number cmdDescID ] , table cmdArray',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			RemoveUnitCmdDesc = {
				type = 'function',
				args = 'number unitID  [, number cmdDescID ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetNoPause = {
				type = 'function',
				args = 'bool noPause',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetUnitToFeature = {
				type = 'function',
				args = 'bool tofeature',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; An ugly global switch that can be used to block units turning into features when they finish being built (like *A DT's do, which have the isFeature tag) [http://springrts.com/phpbb/viewtopic.php?f=14&p=481521 thread] ]],
			},
			SetExperienceGrade = {
				type = 'function',
				args = 'number expGrade  [, number ExpPowerScale  [, number ExpHealthScale  [, number ExpReloadScale ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; expGrade defines how often UnitExperience() will be called.Prior to 104.0 it is based on the following equation:(int)  [exp/(exp+1)]  / expGradePost 104.0 it is the raw change. ]],
			},
			SpawnExplosion = {
				type = 'function',
				args = 'number posX = 0, number posY = 0, number posZ = 0, number dirX = 0, number dirY = 0, number dirZ = 0, table explosionParams',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|104.0}} ]],
			},
			SpawnCEG = {
				type = 'function',
				args = 'string "cegname" | number cegID, number posX = 0, number posY = 0, number posZ = 0, number dirX = 0, number dirY = 0, number dirZ = 0, number radius = 0, number damage = 0',
				returns = 'nil | bool success, number cegID',
				description = [[Lua_SyncedCtrl; cegID new in 95.0. ]],
			},
			SpawnSFX = {
				type = 'function',
				args = 'number unitID, number sfxID, number posX = 0, number posY = 0, number posZ = 0, number dirX = 0, number dirY = 0, number dirZ = 0, number radius = 0, number damage = 0  [, bool absolute ] ',
				returns = 'nil | bool success',
				description = [[Lua_SyncedCtrl; {{new|104.0}} ]],
			},
			SpawnProjectile = {
				type = 'function',
				args = 'number weaponDefID, table projectileParams',
				returns = 'nil | number projectileID',
				description = [[Lua_SyncedCtrl;  ]],
			},
			DeleteProjectile = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}}Silently removes projectiles (no explosion). ]],
			},
			SetProjectileTarget = {
				type = 'function',
				args = 'number projectileID,  [ number targetID, number targetType ]  |  [ number posX = 0, number posY = 0, number posZ = 0 ] ',
				returns = 'nil | bool validTarget',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetProjectileIgnoreTrackingError = {
				type = 'function',
				args = 'number projectileID, bool ignore',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			SetProjectileIsIntercepted = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|99.0}} ]],
			},
			SetProjectileMoveControl = {
				type = 'function',
				args = 'number projectileID, bool enable',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; Disables engine movecontrol, so lua can fully control the physics. ]],
			},
			SetProjectilePosition = {
				type = 'function',
				args = 'number projectileID  [, number posX = 0  [, number posY = 0  [, number posZ = 0 ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetProjectileVelocity = {
				type = 'function',
				args = 'number projectileID  [, number velX = 0  [, number velY = 0  [, number velZ = 0 ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetProjectileCollision = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetProjectileGravity = {
				type = 'function',
				args = 'number projectileID  [, number grav = 0 ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetProjectileSpinAngle = {
				type = 'function',
				args = 'number projectileID  [, number spinAngle = 0 ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|95.0}} ]],
			},
			SetProjectileSpinSpeed = {
				type = 'function',
				args = 'number projectileID  [, number speed = 0 ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|95.0}} ]],
			},
			SetProjectileSpinVec = {
				type = 'function',
				args = 'number projectileID  [, number spinX = 0  [, number spinY = 0  [, number spinZ = 0 ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{removed|95.0}} ]],
			},
			SetProjectileCEG = {
				type = 'function',
				args = 'number projectileID, string ceg_name',
				returns = 'nil',
				description = [[Lua_SyncedCtrl;  ]],
			},
			SetPieceProjectileParams = {
				type = 'function',
				args = 'number projectileID  [, number explosionFlags  [, number spinAngle  [, number spinSpeed  [, number spinVector.x  [, number spinVector.y  [, number spinVector.z ] ] ] ] ] ] ',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}} ]],
			},
			SetProjectileAlwaysVisible = {
				type = 'function',
				args = 'number projectileID, bool alwaysVisible',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|95.0}} ]],
			},
			SetProjectileDamages = {
				type = 'function',
				args = 'number unitID, number weaponNum, string key, number value',
				returns = 'nil',
				description = [[Lua_SyncedCtrl; {{new|101.0}} ]],
			},
			GetGaiaTeamID = {
				type = 'function',
				returns = 'number teamID',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			IsGodModeEnabled = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			IsCheatingEnabled = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			IsDevLuaEnabled = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			IsEditDefsEnabled = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			AreHelperAIsEnabled = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			FixedAllies = {
				type = 'function',
				returns = 'nil | bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			IsGameOver = {
				type = 'function',
				returns = 'bool enabled',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetGameRulesParam = {
				type = 'function',
				args = 'number ruleIndex | string ruleName',
				returns = 'nil | number value | string value',
				description = [[Lua_SyncedRead;  ]],
			},
			GetGameRulesParams = {
				type = 'function',
				returns = 'nil | {  [ = number value1 | string value1, ... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetTeamRulesParam = {
				type = 'function',
				args = 'number teamID, number index | string ruleName',
				returns = 'nil | number value | string value',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamRulesParams = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | {  [ = number value1 | string value1, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitRulesParam = {
				type = 'function',
				args = 'number unitID, number index | string ruleName',
				returns = 'nil | number value | string value',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitRulesParams = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | {  [ = number value1 | string value1, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureRulesParam = {
				type = 'function',
				args = 'number featureID, number index | string ruleName',
				returns = 'nil | number value | string value',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureRulesParams = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | {  [ = number value1 | string value1, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetModOptions = {
				type = 'function',
				returns = '{ } | { "keyName1" = string "value", "keyName2" = string "value", ... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetMapOptions = {
				type = 'function',
				returns = '{ } | { "keyName1" = string "value", "keyName2" = string "value", ... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetGameSpeed = {
				type = 'function',
				returns = 'number userSpeedFactor, number speedFactor, bool paused',
				description = [[Lua_UnsyncedRead; Speed factors are by default 1.0, (the default simulation gamespeed) but are not 0 when the game is paused. Factor at 10x gamespeed is 10.0. {{new|98.0}} ]],
				args = '',
			},
			GetGameFrame = {
				type = 'function',
				returns = 'number frameNum%dayFrames, number frameNum/dayFrames',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetGameSeconds = {
				type = 'function',
				returns = 'number seconds',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetWind = {
				type = 'function',
				returns = 'number dirX, number dirY, number dirZ, number strength, number normDirX, number normDirY, number normDirZ',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetHeadingFromVector = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number heading',
				description = [[Lua_SyncedRead;  ]],
			},
			GetVectorFromHeading = {
				type = 'function',
				args = 'number heading',
				returns = 'number x, number z',
				description = [[Lua_SyncedRead;  ]],
			},
			GetSideData = {
				type = 'function',
				returns = '{  [ = { sideName = string, caseName = string, startUnit = string} },  [ = { ..., ..., ... }, ... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetAllyTeamStartBox = {
				type = 'function',
				args = 'number allyID',
				returns = 'nil | number xMin, number zMin, number xMax, number zMax',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamStartPosition = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | number x, number y, number z',
				description = [[Lua_SyncedRead;  ]],
			},
			GetPlayerList = {
				type = 'function',
				args = ' [ number teamID = -1 | bool onlyActive = false  [, number teamID | bool onlyActive ]  ] ',
				returns = 'nil | {  [ = number playerID, etc... }',
				description = [[Lua_SyncedRead; From 104.0 onwards spectators will be ignored if a valid (>=0) teamID is given. ]],
			},
			GetTeamList = {
				type = 'function',
				args = ' [ number allyTeamID = -1  ] ',
				returns = 'nil | {  [ = number teamID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetAllyTeamList = {
				type = 'function',
				returns = '{  [ = number teamID, etc... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetPlayerInfo = {
				type = 'function',
				args = 'number playerID',
				returns = 'nil | string "name", bool active, bool spectator, number teamID, number allyTeamID, number pingTime, number cpuUsage, string "country", number rank, table customPlayerKeys',
				description = [[Lua_SyncedRead; PRE-83.0: in synced code "name" is "SYNCED_NONAME"! ]],
			},
			GetPlayerControlledUnit = {
				type = 'function',
				args = 'number playerID',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetAIInfo = {
				type = 'function',
				args = 'number teamID',
				returns = 'number skirmishAIID, string "name", number hostingPlayerID, string "shortName", string "version", table options',
				description = [[Lua_SyncedRead; Note: Before 0.82, the first argument was teamID, and then every other argument with a shifted position.shortName, (synced => "SYNCED_NOSHORTNAME"; non-local => "UNKNOWN")version,   (synced => "SYNCED_NOVERSION";   non-local => "UNKNOWN")options    (synced & non-local => empty-table) ]],
			},
			GetAllyTeamInfo = {
				type = 'function',
				args = 'number allyteamID',
				returns = 'nil | table customTeamKeys',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamInfo = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | number teamID, number leader, bool isDead, bool isAiTeam, string "side", number allyTeam, number incomeMultiplier, table customTeamKeys',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamResources = {
				type = 'function',
				args = 'number teamID, string "metal" | "energy"',
				returns = 'nil | number currentLevel, number storage, number pull, number income, number expense, number share, number sent, number received',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitStats = {
				type = 'function',
				args = 'number teamID, number startIndex  [, number endIndex = startIndex ] ',
				returns = 'nil | table stats (see below for table content description)',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamLuaAI = {
				type = 'function',
				args = 'number teamID',
				returns = 'string "luaAI"',
				description = [[Lua_SyncedRead; Returns string containing name of AI defined in file LuaAI.lua as name="". Maybe it returns whole table with all values there, but in my LuaAI.lua name is on first position... ]],
			},
			AreTeamsAllied = {
				type = 'function',
				args = 'number teamID1, number teamID2, ...',
				returns = 'nil | bool isAllied',
				description = [[Lua_SyncedRead;  ]],
			},
			ArePlayersAllied = {
				type = 'function',
				args = 'number playerID1, number playerID2, ...',
				returns = 'nil | bool isAllied',
				description = [[Lua_SyncedRead;  ]],
			},
			GetAllUnits = {
				type = 'function',
				returns = 'nil | table unitTable = {  [ = number unitID, ... }',
				description = [[Lua_SyncedRead; Note that when called from a widget, this also returns units that are only radar blips. For units that are radar blips, you may want to check if they are in los, as GetUnitDefID() will still return true if they have previously been seen. See the UnsyncedRead GetVisibleUnits() call. ]],
				args = '',
			},
			GetTeamUnits = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | table unitTable = {  [ = number unitID, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitsSorted = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | table unitDefTable = {  [number unitDefID]  = {  [ = number unitID, ... }, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitsCounts = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | table countTable = {  [number unitDefID]  = count, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitsByDefs = {
				type = 'function',
				args = 'number teamID, number unitDefID | tableUnitDefs = { number unitDefID1, ... }',
				returns = 'nil | table unitTable = {  [ = number unitID, ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitDefCount = {
				type = 'function',
				args = 'number teamID, number unitDefID',
				returns = 'nil | number count',
				description = [[Lua_SyncedRead;  ]],
			},
			GetTeamUnitCount = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | number count',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitsInRectangle = {
				type = 'function',
				args = 'number xmin, number zmin, number xmax, number zmax  [, number teamID ] ',
				returns = 'nil | table unitTable = {  [ = number unitID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitsInBox = {
				type = 'function',
				args = 'number xmin, number ymin, number zmin, number xmax, number ymax, number zmax  [, number teamID ] ',
				returns = 'nil | table unitTable = {  [ = number unitID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitsInSphere = {
				type = 'function',
				args = 'number x, number y, number z, number radius  [, number teamID ] ',
				returns = 'nil | table unitTable = {  [ = number unitID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitsInCylinder = {
				type = 'function',
				args = 'number x, number z, number radius  [, number teamID ] ',
				returns = 'nil | table unitTable = {  [ = number unitID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitsInPlanes = {
				type = 'function',
				args = 'table planes = {  [ = number normalVecX, number normalVecY, number normalVecZ, number d }, etc... }',
				returns = 'nil | table unitTable = {  [ = number unitID, etc... }',
				description = [[Lua_SyncedRead; Plane normals point towards accepted space, so the acceptance criteria for each plane is: ]],
			},
			GetUnitNearestAlly = {
				type = 'function',
				args = 'number unitID  [, number range ] ',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitNearestEnemy = {
				type = 'function',
				args = 'number unitID  [, number range  [, bool useLOS ] ] ',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead; Post 95.0 this no longer returns neutral units. ]],
			},
			ValidUnitID = {
				type = 'function',
				args = 'number unitID',
				returns = 'bool valid',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitIsDead = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isDead',
				description = [[Lua_SyncedRead; Returns false if unit exists and is alive, true for a brief period of time after unit dies, nil otherwise. Keep this in mind when using (not Spring.GetUnitIsDead() ). Also very important to note, that you can receive units that are 'already dead', when you do a Spring.GetAllUnits() call. These 'dead' units have already had their unitdestroyed callins called, and that will not get called again, and even more interestingly, these units are also valid, as in the above ValidUnitID callin will return true. The GetUnitIsDead howerver, will return true for these units, that are already dead but still valid units. ]],
			},
			GetUnitTooltip = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | string tooltip',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitDefID = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number unitDefID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitTeam = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number teamID',
				description = [[Lua_SyncedRead; Gets which team a unit belongs to. Note that this still returns the old team when called from the UnitTaken / UnitGiven callins. ]],
			},
			GetUnitAllyTeam = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number allyID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitLineage = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number lineage | number lineage, bool lineageIsRoot',
				description = [[Lua_SyncedRead; {{Removed|83.0}} ]],
			},
			GetUnitNeutral = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool neutral',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitHealth = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number health, number maxHealth, number paralyzeDamage, number captureProgress, number buildProgress',
				description = [[Lua_SyncedRead; Build progress is returned as floating point number between 0.0 and 1.0. ]],
			},
			GetUnitArmored = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool armored, number armorMultiple',
				description = [[Lua_SyncedRead; armorMultiple new in version 0.83.x. ]],
			},
			GetUnitIsStunned = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool stunned_or_inbuild, bool stunned, bool inbuild',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitMaxRange = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number maxEngagementRange',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitResources = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number metalMake, number metalUse, number energyMake, number energyUse',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitHarvestStorage = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number metal',
				description = [[Lua_SyncedRead; See also {{xtaglink|Gamedev:UnitDefs|harvestStorage}} UnitDef tag. ]],
			},
			GetUnitMetalExtraction = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number metalExtraction',
				description = [[Lua_SyncedRead; 0.82+ and later ]],
			},
			GetUnitExperience = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number experience',
				description = [[Lua_SyncedRead; 0.82+ and later ]],
			},
			GetUnitStates = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | table unitStates',
				description = [[Lua_SyncedRead; The unitStates table arguments are: ]],
			},
			GetUnitIsActive = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool active',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitIsCloaked = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isCloaked',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitSelfDTime = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number time',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitStockpile = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number numStockpiled, number numStockpileQued, number buildPercent',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitHeight = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number height',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitRadius = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number radius',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitMass = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number mass',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetUnitBlocking = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isBlocking, bool isSolidObjectCollidable, bool isProjectileCollidable, bool isRaySegmentCollidable, bool crushable, bool blockEnemyPushing, bool blockHeightChanges',
				description = [[Lua_SyncedRead; {{new|95.0}}Additional output arguments. ]],
			},
			GetUnitPosition = {
				type = 'function',
				args = 'number unitID  [, bool midPos  [, bool aimPos ] ] ',
				returns = 'nil | number basePointX, number basePointY, number basePointZ  [, number midPointX, number midPointY, number midPointZ  [, number aimPointX, number aimPointY, number aimPointZ ] ] ',
				description = [[Lua_SyncedRead; Since 89.0, returns the base (default), middle or aim position of the unit. ]],
			},
			GetUnitBasePosition = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number posX, number posY, number posZ',
				description = [[Lua_SyncedRead; {{Removed|89.0}} Use GetUnitPosition instead. Returned the bottom of the unit. ]],
			},
			GetUnitDirection = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; Returns the direction vector. ]],
			},
			GetUnitHeading = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number heading',
				description = [[Lua_SyncedRead; Returns heading directions used in COB scripts. ]],
			},
			GetUnitRotation = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number pitch, number yaw, number roll',
				description = [[Lua_SyncedRead; {{New|95.0}} ]],
			},
			GetUnitVelocity = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number velX, number velY, number velZ, number velLength',
				description = [[Lua_SyncedRead; VelLength new in 95.0, it returns the velocity length in one frame. Multiply by 30 (game frames/s) to get an equivalent to unitDef.speed. ]],
			},
			GetUnitBuildFacing = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number facing',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitIsBuilding = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead; Returns what unit a constructor/factory is currently building. ]],
			},
			GetUnitCurrentBuildPower = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number buildPower',
				description = [[Lua_SyncedRead; {{new|92.0}} ]],
			},
			GetUnitNanoPieces = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | {  [ = number piece1, etc ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitTransporter = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitIsTransporting = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | {  [ = number unitID, etc ... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitShieldState = {
				type = 'function',
				args = 'number unitID  [, number weaponID = -1 ] ',
				returns = 'nil | number isEnabled, number curPower',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitTravel = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number travel, number travelPeriod',
				description = [[Lua_SyncedRead; Marked as deprecated. ]],
			},
			GetUnitFuel = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number fuel',
				description = [[Lua_SyncedRead; Marked as deprecated. ]],
			},
			GetUnitFlanking = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number mode, number modilityAdd, number minDamage, number maxDamage, number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitSensorRadius = {
				type = 'function',
				args = 'number unitID, string type',
				returns = 'nil | number radius',
				description = [[Lua_SyncedRead; Possible types are:los, airLos, radar, sonar, seismic, radarJammer, sonarJammer ]],
			},
			GetUnitLosState = {
				type = 'function',
				args = 'number unitID  [, number allyTeamID  [, bool raw ] ] ',
				returns = 'nil | number raw |  [ string "los" = true  [, string "radar" = true  [, string "typed" = true ] ] ] ',
				description = [[Lua_SyncedRead; Raw is only available in gadgets. And RAW returns an bitmask integer, where the bits are:  1: LOS_INLOS,  the unit is currently in the los of the allyteam,  2: LOS_INRADAR the unit is currently in radar from the allyteam,  4: LOS_PREVLOS  the unit has previously been in los from the allyteam,  8: LOS_CONTRADAR  the unit has continuously been in radar since it was last inlos by the allyteam ]],
			},
			GetUnitSeparation = {
				type = 'function',
				args = 'number unitID1, number unitID2  [, bool 2D  [, bool surfaceDist ] ] ',
				returns = 'nil | number distance',
				description = [[Lua_SyncedRead; SurfaceDist new in 95.0. Returns the distance of two units. SurfaceDist calculates the distance between the unitsphere surfaces instead of their midpos. ]],
			},
			GetUnitFeatureSeparation = {
				type = 'function',
				args = 'number unitID, number featureID  [, bool 2D ] ',
				returns = 'nil | number distance',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetUnitDefDimensions = {
				type = 'function',
				args = 'number unitDefID',
				returns = 'nil | table defDimensions',
				description = [[Lua_SyncedRead; DefDimensions table arguments are: ]],
			},
			GetUnitLastAttacker = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitLastAttackedPiece = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | string pieceName, number gameframe',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitMoveTypeData = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | table movetypeData',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitCollisionVolumeData = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitWeaponState = {
				type = 'function',
				args = 'number unitID, number weaponNum, string tag',
				returns = 'nil | number tagVariable',
				description = [[Lua_SyncedRead; String argument "tag" can return a specific variable. Possible tags are: ]],
			},
			GetUnitWeaponDamages = {
				type = 'function',
				args = 'number unitID, number weaponNum | string "selfDestruct" | string "explode", string tag',
				returns = 'nil | number tagVariable',
				description = [[Lua_SyncedRead; String argument "tag" can return a specific variable. Possible tags are: ]],
			},
			GetUnitWeaponVectors = {
				type = 'function',
				args = 'number unitID, number weaponNum',
				returns = 'nil | number posX, number posY, number posZ, number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitWeaponTryTarget = {
				type = 'function',
				args = 'number unitID, number weaponNum, number targetID | number posX, number posY, number posZ',
				returns = 'nil | bool success',
				description = [[Lua_SyncedRead; {{new|94.0}}For a position it just checks if the weapon can attackGround. For a unit existance, category, death status, crashing status, LOS status, neutral status, ally status and transport status are checked. ]],
			},
			GetUnitWeaponTestTarget = {
				type = 'function',
				args = 'number unitID, number weaponNum, number targetID | number posX, number posY, number posZ',
				returns = 'nil | bool success',
				description = [[Lua_SyncedRead; {{new|94.0}}Checks TryTarget, TestRange, and that weapon emit point is not below ground, then checks FreeLineOfFire. ]],
			},
			GetUnitWeaponTestRange = {
				type = 'function',
				args = 'number unitID, number weaponNum, number targetID | number posX, number posY, number posZ',
				returns = 'nil | bool success',
				description = [[Lua_SyncedRead; {{new|94.0}}Checks if target is in range including height modifiers and cylinder targeting if set. ]],
			},
			GetUnitWeaponHaveFreeLineOfFire = {
				type = 'function',
				args = 'number unitID, number weaponNum, number targetID |  [ number srcPosX  [, number srcPosY  [, number srcPosZ  [, number tgtPosX  [, number tgtPosY  [, number tgtPosZ ] ] ] ] ] ] ',
				returns = 'nil | bool success',
				description = [[Lua_SyncedRead; {{new|104.0}}The param list was changed so that the source firing position can also be passed. ]],
			},
			GetUnitWeaponCanFire = {
				type = 'function',
				args = 'number unitID, number weaponNum',
				returns = 'nil | bool canFire',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			GetUnitWeaponTarget = {
				type = 'function',
				args = 'number unitID, number weaponNum',
				returns = 'nil | number 0 | number 1, bool isUserTarget, number unitID | number 2, bool isUserTarget, { number posX, number posY, number posZ } | number 3, bool isUserTarget, number projectileID',
				description = [[Lua_SyncedRead; {{new|95.0}}Returned number of args is always 3 if targetType != None. ]],
			},
			GetRadarErrorParams = {
				type = 'function',
				args = 'number allyTeamID',
				returns = 'nil | number allyteamErrorSize, number baseErrorSize, number baseErrorMult',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			GetUnitPosErrorParams = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number posErrorVector.x, number posErrorVector.y, number posErrorVector.z, number posErrorDelta.x, number posErrorDelta.y, number posErrorDelta.z, number nextPosErrorUpdatebaseErrorMult',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			IsUnitInLos = {
				type = 'function',
				args = 'number unitID, number allyID',
				returns = 'nil | bool inLOS',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			IsUnitInAirLos = {
				type = 'function',
				args = 'number unitID, number allyID',
				returns = 'nil | bool inAirLOS',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			IsUnitInRadar = {
				type = 'function',
				args = 'number unitID, number allyID',
				returns = 'nil | bool inRadar',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			IsUnitInJammer = {
				type = 'function',
				args = 'number unitID, number allyID',
				returns = 'nil | bool inJammer',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetUnitVectors = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | { number frontX, number frontY, number frontZ } , { number upX, number upY, number upZ } , { number rightX, number rightY, number rightZ }',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetUnitPiecePosition = {
				type = 'function',
				args = 'number unitID, number piece',
				returns = 'number posX, number posY, number posZ',
				description = [[Lua_SyncedRead; Returns piece position in unit space. Also remember to multiply the x-axis value with -1 if you want to move a piece to another piece. ]],
			},
			GetUnitPieceDirection = {
				type = 'function',
				args = 'number unitID, number piece',
				returns = 'number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; Fixed since 101. Now returns the same direction as Spring.GetUnitPiecePosDir. ]],
			},
			GetUnitPiecePosDir = {
				type = 'function',
				args = 'number unitID, number pieceNum',
				returns = 'nil | number posX, number posY, number posZ, number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; Returns piece position and direction in world space. The direction (dirX, dirY, dirZ) is not necessarily normalized. The position is defined as the position of the first vertex of the piece and it defines direction as the direction in which the line from the first vertex to the second vertex points. ]],
			},
			GetUnitPieceMatrix = {
				type = 'function',
				args = 'number unitID, number piece',
				returns = '{  [ = number, ... ,  [ = number }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitPieceList = {
				type = 'function',
				args = 'number unitID',
				returns = '{  [ = string "piecename", ... ,  [ = string "piecename" }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitPieceMap = {
				type = 'function',
				args = 'number unitID',
				returns = '{ string "piecename1" = number pieceNum1, ... , string "piecenameN" = number pieceNumN }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitPieceInfo = {
				type = 'function',
				args = 'number unitID, number piece',
				returns = 'table pieceInfo',
				description = [[Lua_SyncedRead; {{new|95.0}} "parent" field{{new|101.0}} parent for root pieces is now "[null]" instead of "" table pieceInfo contains: ]],
			},
			GetUnitScriptPiece = {
				type = 'function',
				args = 'number unitID  [, number scriptPiece ] ',
				returns = 'nil |  [ number scriptPieceNum = number modelPieceNum ]  | number modelPieceNum',
				description = [[Lua_SyncedRead; This functions translate the COB ScriptPiece numbers into the ModelPiece numbers (the set of ScriptPieces is a subset of the ModelPieces, means #ScriptPieces piece definition in your cob/bos. ]],
			},
			GetUnitScriptNames = {
				type = 'function',
				args = 'number unitID',
				returns = '{ string "cobpiecename1" = number ScriptPieceNum1, ... , string "cobpiecenameN" = number ScriptPieceNumN }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitPieceCollisionVolumeData = {
				type = 'function',
				args = 'number unitID, number pieceID',
				returns = 'number scaleX,number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_SyncedRead; As of 101.0 this is 1-based piece index argument (was 0-based). ]],
			},
			GetUnitCommands = {
				type = 'function',
				args = 'number unitID  [, number count = -1 ] ',
				returns = 'nil | table commandQueueTable',
				description = [[Lua_SyncedRead; This function can trigger an error if called too often without passing a second parameter. Refer to [https://github.com/spring/spring/blob/92c54d5b15775c39a8c67b203c28fe9b9db51cea/rts/Lua/LuaSyncedRead.cpp#L3983-L3996 LuaSyncedRead.cpp#L3983-L3996].CommandQueueTable table arguments are: ]],
			},
			GetFullBuildQueue = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | table buildOrders = {  [ = {  [number unitDefID]  = number count },  etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetRealBuildQueue = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | table buildOrders = {  [ = {  [number unitDefID]  = number count },  etc... }',
				description = [[Lua_SyncedRead; Cleans the buildqueue of things the unit can't build itself. ]],
			},
			GetFactoryCommands = {
				type = 'function',
				args = 'number unitID  [, number count = -1 ] ',
				returns = 'nil | table commandQueueTable',
				description = [[Lua_SyncedRead; CommandQueueTable table arguments are: ]],
			},
			GetFactoryCounts = {
				type = 'function',
				args = 'number unitID  [, number count  [, bool addCMDs ] ] ',
				returns = 'nil | table commandQueueTable = {  [ = {  [number unitDefID | number -cmdID]  = number count }, ...   }',
				description = [[Lua_SyncedRead; Gets the buildqueue of a factory. ]],
			},
			GetUnitCmdDescs = {
				type = 'function',
				args = 'number unitID  [, number startIndex  [, number endIndex ] ] ',
				returns = 'nil | table commandDescTable',
				description = [[Lua_SyncedRead; CommandDescTable arguments are: ]],
			},
			FindUnitCmdDesc = {
				type = 'function',
				args = 'number unitID, number cmdID',
				returns = 'nil | number index',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturesInRectangle = {
				type = 'function',
				args = 'number xMin, number zMin, number xMax, number zMax',
				returns = 'nil | table featureTable = {  [ = number featureID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturesInSphere = {
				type = 'function',
				args = 'number x, number y, number z, number radius',
				returns = 'nil | table featureTable = {  [ = number featureID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturesInCylinder = {
				type = 'function',
				args = 'number x, number z, number radius',
				returns = 'nil | table featureTable = {  [ = number featureID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetAllFeatures = {
				type = 'function',
				returns = 'table featureTable = {  [ = number featureID, etc... }',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			ValidFeatureID = {
				type = 'function',
				args = 'number featureID',
				returns = 'bool isValid',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureDefID = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number featureDefID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureTeam = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number teamID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureAllyTeam = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number allyID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureHealth = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number health, number maxHealth, number resurrectProgress',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureHeight = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number height',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureRadius = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number radius',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureMass = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number mass',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetFeatureSeparation = {
				type = 'function',
				args = 'number featureID1, number featureID2  [, bool 2D ] ',
				returns = 'nil | number distance',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetFeaturePosition = {
				type = 'function',
				args = 'number featureID  [, bool midPos  [, bool aimPos ] ] ',
				returns = 'nil | number bpX, number bpY, number bpZ  [, number mpX, number mpY, number mpZ  [, number apX, number apY, number apZ ] ] ',
				description = [[Lua_SyncedRead; Since 89.0, returns the base (default), middle or aim position of the feature. ]],
			},
			GetFeatureVelocity = {
				type = 'function',
				args = 'number featureID  [, bool norm ] ',
				returns = 'nil | number velX, number velY, number velZ, number velLength',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			GetFeatureDirection = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureRotation = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number pitch, number yaw, number roll',
				description = [[Lua_SyncedRead; {{New|101.0}} ]],
			},
			GetFeatureHeading = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number heading',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureResources = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number RemainingMetal, number maxMetal, number RemainingEnergy, number maxEnergy, number reclaimLeft, number reclaimTime',
				description = [[Lua_SyncedRead; reclaimTime {{new|105.0}} ]],
			},
			GetFeatureNoSelect = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | bool noSelect',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureResurrect = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | string UnitDefName, number buildFacing',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeatureCollisionVolumeData = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturePieceCollisionVolumeData = {
				type = 'function',
				args = 'number featureID, number pieceID',
				returns = 'nil | number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			GetFeatureBlocking = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | bool isBlocking, bool isSolidObjectCollidable, bool isProjectileCollidable, bool isRaySegmentCollidable, bool crushable, bool blockEnemyPushing, bool blockHeightChanges',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			GetFeatureLastAttackedPiece = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | string pieceName, number gameframe',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturePieceMap = {
				type = 'function',
				args = 'number featureID',
				returns = '{ string "piecename1" = number pieceNum1, ... , string "piecenameN" = number pieceNumN }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturePieceList = {
				type = 'function',
				args = 'number featureID',
				returns = '{  [ = string "piecename", ... ,  [ = string "piecename" }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetFeaturePieceInfo = {
				type = 'function',
				args = 'number featureID, number piece',
				returns = 'table pieceInfo',
				description = [[Lua_SyncedRead; {{new|95.0}} "parent" field{{new|101.0}} parent for root pieces is now "[null]" instead of "" table pieceInfo contains: ]],
			},
			GetFeaturePiecePosition = {
				type = 'function',
				args = 'number featureID, number piece',
				returns = 'number posX, number posY, number posZ',
				description = [[Lua_SyncedRead; Returns piece position in unit space. Also remember to multiply the x-axis value with -1 if you want to move a piece to another piece. ]],
			},
			GetFeaturePieceDirection = {
				type = 'function',
				args = 'number featureID, number piece',
				returns = 'number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; Fixed since 101. Now returns the same direction as Spring.GetUnitPiecePosDir. ]],
			},
			GetFeaturePiecePosDir = {
				type = 'function',
				args = 'number featureID, number pieceNum',
				returns = 'nil | number posX, number posY, number posZ, number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; Returns piece position and direction in world space. The direction (dirX, dirY, dirZ) is not necessarily normalized. The position is defined as the position of the first vertex of the piece and it defines direction as the direction in which the line from the first vertex to the second vertex points. ]],
			},
			GetFeaturePieceMatrix = {
				type = 'function',
				args = 'number featureID, number piece',
				returns = '{  [ = number, ... ,  [ = number }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetCOBUnitVar = {
				type = 'function',
				args = 'number unitID, number varID  [, bool unpack = false ] ',
				returns = 'nil | number value | number unpackedX, number unpackedY',
				description = [[Lua_SyncedRead;  ]],
			},
			GetCOBTeamVar = {
				type = 'function',
				args = 'number teamID, number varID  [, bool unpack = false ] ',
				returns = 'nil | number value | number unpackedX, number unpackedY',
				description = [[Lua_SyncedRead;  ]],
			},
			GetCOBAllyTeamVar = {
				type = 'function',
				args = 'number allyID, number varID  [, bool unpack = false ] ',
				returns = 'nil | number value | number unpackedX, number unpackedY',
				description = [[Lua_SyncedRead;  ]],
			},
			GetCOBGlobalVar = {
				type = 'function',
				args = 'number varID  [, bool unpack = false ] ',
				returns = 'nil | number value | number unpackedX, number unpackedY',
				description = [[Lua_SyncedRead;  ]],
			},
			GetGroundHeight = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number y',
				description = [[Lua_SyncedRead;  ]],
			},
			GetGroundOrigHeight = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number y',
				description = [[Lua_SyncedRead; This returns the ground's original height (i.e. before terraforming) at a given x,z position. ]],
			},
			GetGroundNormal = {
				type = 'function',
				args = 'number x, number z  [, bool smoothedNormal = false ] ',
				returns = 'number x, number y, number z, number slope',
				description = [[Lua_SyncedRead; {{new|100.0}}: smoothedNormal and slope ]],
			},
			GetGroundInfo = {
				type = 'function',
				args = 'number x, number z',
				returns = 'string "Type", number metal, number hardness, number tankSpeed, number kbotSpeed, number hoverSpeed, number shipSpeed, bool receiveTracks',
				description = [[Lua_SyncedRead;  ]],
			},
			GetGroundBlocked = {
				type = 'function',
				args = 'number x1, number z1, number x2, number z2',
				returns = 'nil | string "feature", number featureID | string "unit", number unitID',
				description = [[Lua_SyncedRead;  ]],
			},
			GetGroundExtremes = {
				type = 'function',
				returns = 'nil | number minHeight, number maxHeight',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetSmoothMeshHeight = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number y',
				description = [[Lua_SyncedRead;  ]],
			},
			GetMetalMapSize = {
				type = 'function',
				returns = 'number sizeX, number sizeY',
				description = [[Lua_SyncedRead;  ]],
				args = '',
			},
			GetMetalAmount = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number metalAmount',
				description = [[Lua_SyncedRead; With x & z in metal map coordinates (worldspace/16) ]],
			},
			GetMetalExtraction = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number extractionAmount',
				description = [[Lua_SyncedRead; With x & z in metal map coordinates (worldspace/16) ]],
			},
			GetTerrainTypeData = {
				type = 'function',
				args = 'number i',
				returns = 'nil | string "name", number hardness, number tankSpeed, number kbotSpeed, number hoverSpeed, number shipSpeed, bool receiveTracks',
				description = [[Lua_SyncedRead; {{new|92.0}} ]],
			},
			GetGrass = {
				type = 'function',
				args = 'number x, number z',
				returns = 'number 0 | number 1 | number 255',
				description = [[Lua_SyncedRead; With x & z in worldspace coordinates. Returns 255 if grass is disabled in settings, or if map does not have a grassmap specified. ]],
			},
			TestMoveOrder = {
				type = 'function',
				args = 'number unitDefID, number pos.x  [, number pos.y  [, number pos.z  [, number dir.x  [, number dir.y  [, number dir.z  [, bool testTerrain  [, bool testObjects  [, bool centerOnly ] ] ] ] ] ] ] ] ',
				returns = 'bool validMove',
				description = [[Lua_SyncedRead; {{New|95.0}} ]],
			},
			TestBuildOrder = {
				type = 'function',
				args = 'number unitDefID, number x, number y, number z, number facing',
				returns = 'number blocking  [, number featureID ] ',
				description = [[Lua_SyncedRead;  ]],
			},
			Pos2BuildPos = {
				type = 'function',
				args = 'number unitDefID, number x, number y, number z  [, number facing ] ',
				returns = 'nil | number x, number y, number z',
				description = [[Lua_SyncedRead;  ]],
			},
			GetUnitEstimatedPath = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | table waypoints, table waypointIndices',
				description = [[Lua_SyncedRead; The table arguments are: ]],
			},
			IsPosInLos = {
				type = 'function',
				args = 'number x, number y, number z, number allyID',
				returns = 'bool isInLos',
				description = [[Lua_SyncedRead;  ]],
			},
			IsPosInRadar = {
				type = 'function',
				args = 'number x, number y, number z, number allyID',
				returns = 'bool isInRadar',
				description = [[Lua_SyncedRead;  ]],
			},
			IsPosInAirLos = {
				type = 'function',
				args = 'number x, number y, number z, number allyID',
				returns = 'bool isInAirLos',
				description = [[Lua_SyncedRead;  ]],
			},
			GetPositionLosState = {
				type = 'function',
				args = 'number x, number y, number z  [, number allyID ] ',
				returns = 'bool LosOrRadar, bool inLos, bool inRadar, bool jammed',
				description = [[Lua_SyncedRead; Jammed new in 95.0, indicates if a position is actively being radar- or sonar-jammed by ANY allyteam. ]],
			},
			GetClosestValidPosition = {
				type = 'function',
				args = 'number unitDefID, number x, number y, number z, number r',
				returns = 'nil',
				description = [[Lua_SyncedRead; CURRENTLY UNFINISHED! Always returns nil! ]],
			},
			GetProjectilesInRectangle = {
				type = 'function',
				args = 'number xmin, number zmin, number xmax, number zmax  [, bool excludeWeaponProjectiles  [, bool excludePieceProjectiles ] ] ',
				returns = 'nil | table projectileTable = {  [ = number projectileID, etc... }',
				description = [[Lua_SyncedRead;  ]],
			},
			GetProjectileOwnerID = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number unitID',
				description = [[Lua_SyncedRead; {{new|99.0}} ]],
			},
			GetProjectileTeamID = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number teamID',
				description = [[Lua_SyncedRead; {{new|99.0}} ]],
			},
			GetProjectileDefID = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number weaponDefID',
				description = [[Lua_SyncedRead; Using this to get a weaponDefID is HIGHLY preferred to indexing WeaponDefNames via GetProjectileName. ]],
			},
			GetProjectileName = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | string name',
				description = [[Lua_SyncedRead; It is recommended to rather use GetProjectileDefID for indexing purposes. ]],
			},
			GetProjectileType = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | bool weapon, bool piece',
				description = [[Lua_SyncedRead;  ]],
			},
			GetProjectileTarget = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number targetTypeInt, number targetID | table targetPos = {x, y, z}',
				description = [[Lua_SyncedRead;  ]],
			},
			GetProjectileIntercepted = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | bool isBeingIntercepted',
				description = [[Lua_SyncedRead; {{new|99.0}} ]],
			},
			GetProjectilePosition = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number posX, number posY, number posZ',
				description = [[Lua_SyncedRead;  ]],
			},
			GetProjectileVelocity = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number velX, number velY, number velZ',
				description = [[Lua_SyncedRead; {{new|95.0}}: returns (targetPos - startPos) for Beamlasers and similar weapons ]],
			},
			GetProjectileGravity = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number gravity',
				description = [[Lua_SyncedRead;  ]],
			},
			GetPieceProjectileParams = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number explosionFlags, number spinAngle, number spinSpeed, number spinVectorX, number spinVectorY, number spinVectorZ',
				description = [[Lua_SyncedRead; {{new|95.0}}ExplosionFlags use binary flags with the following integer equivalents (more info [http://springrts.com/wiki/Animation-CobConstants#explode here] ):SHATTER = 1,  EXPLODE = 2, EXPLODE_ON_HIT = 2, FALL = 4, SMOKE = 8, FIRE = 16, NONE = 32, NO_CEG_TRAIL = 64, NO_HEATCLOUD = 128 ]],
			},
			GetProjectileTimeToLive = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number ttl',
				description = [[Lua_SyncedRead; {{new|99.0}} ]],
			},
			GetProjectileDirection = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number dirX, number dirY, number dirZ',
				description = [[Lua_SyncedRead; {{new|95.0}} ]],
			},
			GetProjectileSpinAngle = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number angle',
				description = [[Lua_SyncedRead; Deprecated in 95.0 - use GetPieceProjectileParams instead! ]],
			},
			GetProjectileSpinSpeed = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number spinSpeed',
				description = [[Lua_SyncedRead; Deprecated in 95.0 - use GetPieceProjectileParams instead! ]],
			},
			GetProjectileSpinVec = {
				type = 'function',
				args = 'number projectileID',
				returns = 'nil | number x, number y, number z',
				description = [[Lua_SyncedRead; Deprecated in 95.0 - use GetPieceProjectileParams instead! ]],
			},
			GetProjectileDamages = {
				type = 'function',
				args = 'number unitID, number weaponNum, string tag',
				returns = 'nil | number damage',
				description = [[Lua_SyncedRead; {{new|101.0}} ]],
			},
			SetLastMessagePosition = {
				type = 'function',
				args = 'number x, number y, number z',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			Echo = {
				type = 'function',
				args = 'arg1  [, arg2  [, ... ] ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Useful for debugging. Prints values in the spring chat console. Hint: the default print() writes to STDOUT. ]],
			},
			Log = {
				type = 'function',
				args = 'string section, number logLevel | string logLevel, string LogMessage1  [, string LogMessage2 [, ... ] ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendCommands = {
				type = 'function',
				args = '{ string command1, string command2, ... }',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			SetActiveCommand = {
				type = 'function',
				args = 'number cmdIndex  [, number button = 1  [, bool leftClick  [, bool rightClick  [, bool alt  [, bool ctrl  [, bool meta  [, bool shift ] ] ] ] ] ] ] ',
				returns = 'nil | bool commandSet',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			LoadCmdColorsConfig = {
				type = 'function',
				args = 'string config',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			LoadCtrlPanelConfig = {
				type = 'function',
				args = 'string config',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			ForceLayoutUpdate = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
				args = '',
			},
			SetDrawSelectionInfo = {
				type = 'function',
				args = 'bool drawSelectionInfo',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetMouseCursor = {
				type = 'function',
				args = 'string cursorName  [, number scale ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			WarpMouse = {
				type = 'function',
				args = 'number x, number y',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			SetLosViewColors = {
				type = 'function',
				args = 'table always = {r,g,b}, table LOS = {r,g,b}, table radar = {r,g,b}, table jam = {r,g,b}, table radar2 = {r,g,b}',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl.New arguments since 100.0 (radar2 is the inside of radar edge). Arguments for 99.0 and before: ]],
			},
			SendMessage = {
				type = 'function',
				args = 'string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendMessageToPlayer = {
				type = 'function',
				args = 'number playerID, string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendMessageToTeam = {
				type = 'function',
				args = 'number teamID, string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendMessageToAllyTeam = {
				type = 'function',
				args = 'number allyID, string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendMessageToSpectators = {
				type = 'function',
				args = 'string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  (with # being a playerid) inside the string will be replaced with the players name - i.e. :Spring.SendMessage (" did something")might display as "ProRusher did something" ]],
			},
			MarkerAddPoint = {
				type = 'function',
				args = 'number x, number y, number z  [, string text = ""  [, bool localOnly ] ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			MarkerAddLine = {
				type = 'function',
				args = 'number x1, number y1, number z1, number x2, number y2, number z2',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			MarkerErasePosition = {
				type = 'function',
				args = 'number x, number y, number z',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			LoadSoundDef = {
				type = 'function',
				args = 'string soundfile',
				returns = 'nil | bool success',
				description = [[Lua_UnsyncedCtrl; Loads a SoundDefs file, the format is the same as in `gamedata/sounds.lua`. ]],
			},
			PlaySoundFile = {
				type = 'function',
				args = 'string soundfile  [, number volume = 1.0  [, number posx  [, number posy  [, number posz  [, number speedx [, number speedy [, number speedz [, number | string channel ] ] ] ] ] ] ] ] ',
				returns = 'nil | bool playSound',
				description = [[Lua_UnsyncedCtrl; Possible arguments for channel argument: ]],
			},
			PlaySoundStream = {
				type = 'function',
				args = 'string oggfile  [, number volume = 1.0  [, bool enqueue ] ] ',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Allows to play an Ogg Vorbis (.OGG) compressed sound file. In 83.0 and up multiple sound streams may be played at once. ]],
			},
			StopSoundStream = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Terminates any SoundStream currently running. ]],
				args = '',
			},
			PauseSoundStream = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
				args = '',
			},
			SetSoundStreamVolume = {
				type = 'function',
				args = 'number volume',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SendLuaUIMsg = {
				type = 'function',
				args = 'string message, string mode',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl.Possible modes are:"s"/"specs" & "a"/"allies" ]],
			},
			SendLuaGaiaMsg = {
				type = 'function',
				args = 'string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			SendLuaRulesMsg = {
				type = 'function',
				args = 'string message',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			SendSkirmishAIMessage = {
				type = 'function',
				args = 'number aiTeam, string message',
				returns = 'nil | bool ai_processed, {  [ = string response1, ... }',
				description = [[Lua_UnsyncedCtrl; {{new|83.0}}Note there is nothing in this table due to "limitations" of the AI interface. ]],
			},
			SetUnitLeaveTracks = {
				type = 'function',
				args = 'number unitID, bool leavetracks',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|83.0}} ]],
			},
			SetUnitSelectionVolumeData = {
				type = 'function',
				args = 'number featureID, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number vType, number tType, number Axis',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}} ]],
			},
			SelectUnitMap = {
				type = 'function',
				args = '{  [ = anything, ... }  [, bool append ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SelectUnitArray = {
				type = 'function',
				args = '{  [ = unitID1,  [ = unitID2, ... }  [, bool append ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetUnitGroup = {
				type = 'function',
				args = 'number unitID, number groupID',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			GiveOrder = {
				type = 'function',
				args = 'number cmdID, table params = {number, etc...}, table options = {"alt", "ctrl", "shift", "right"}',
				returns = 'nil | bool true',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl.Gives order to all selected units. ]],
			},
			SetBuildFacing = {
				type = 'function',
				args = 'number facing',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetBuildSpacing = {
				type = 'function',
				args = 'number spacing',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetUnitNoDraw = {
				type = 'function',
				args = 'number unitID, bool noDraw',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only! ]],
			},
			SetUnitNoSelect = {
				type = 'function',
				args = 'number unitID, bool noSelect',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only! ]],
			},
			SetUnitNoMinimap = {
				type = 'function',
				args = 'number unitID, bool noMinimap',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only! ]],
			},
			SetFeatureFade = {
				type = 'function',
				args = 'number featureID, bool allow',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}}Control whether a feature will fade or not when zoomed out. ]],
			},
			SetFeatureNoDraw = {
				type = 'function',
				args = 'number featureID, bool noDraw',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only! ]],
			},
			SetFeatureSelectionVolumeData = {
				type = 'function',
				args = 'number featureID, number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number vType, number tType, number Axis',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}} ]],
			},
			SetDrawSky = {
				type = 'function',
				args = 'bool drawSky',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetDrawWater = {
				type = 'function',
				args = 'bool drawWater',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetDrawGround = {
				type = 'function',
				args = 'bool drawGround',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetWaterParams = {
				type = 'function',
				args = 'table params',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; As of 104.0 no longer needs cheating enabled.Allows to change water params (mostly BumpWater ones) at runtime. You may want to set BumpWaterUseUniforms in your [ [springrc] ] to 1, then you don't even need to restart BumpWater via `/water 4`. "Params" table contains: ]],
			},
			SetMapRenderingParams = {
				type = 'function',
				args = 'table params',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}}Allows to change map rendering params at runtime."Params" table contains: ]],
			},
			SetLogSectionFilterLevel = {
				type = 'function',
				args = 'string sectionName, string | number logLevel',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{New|95.0}}See [ [infolog.txt] ] for possible log sections. ]],
			},
			SetDrawGroundDeferred = {
				type = 'function',
				args = 'bool drawGroundDeferred  [, bool drawGroundForward ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}} {{var|drawGroundForward}} allows disabling of the forward pass ]],
			},
			SetDrawModelsDeferred = {
				type = 'function',
				args = 'bool drawUnitsDeferred, bool drawFeaturesDeferred  [, bool drawUnitsForward  [, bool drawFeaturesForward  ] ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}} {{var|drawFeaturesForward}}, {{var|drawUnitsForward}} allows disabling of the respective forward passes ]],
			},
			SetVideoCapturingMode = {
				type = 'function',
				args = 'bool allowCaptureMode',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}}This doesn't actually record the game in any way, it just regulates the framerate and interpolations. ]],
			},
			SetVideoCapturingTimeOffset = {
				type = 'function',
				args = 'bool timeOffset',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}} ]],
			},
			DrawUnitCommands = {
				type = 'function',
				args = 'table units = {  [ = arg1, ... }, bool true',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetTeamColor = {
				type = 'function',
				args = 'number teamID, number r, number g, number b',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			AssignMouseCursor = {
				type = 'function',
				args = 'string cmdName, string iconFileName  [, bool overwrite = true  [, bool hotSpotTopLeft = false ] {rbracket}}',
				returns = 'nil | bool assigned',
				description = [[Lua_UnsyncedCtrl; Changes/creates the cursor of a single CursorCmd. Note, that iconFileName is not the full filename instead it is like this:Wanted filename: Anims/cursorattack_0.bmp=> iconFileName: cursorattack ]],
			},
			ReplaceMouseCursor = {
				type = 'function',
				args = 'string oldFileName, string newFileName  [, bool hotSpotTopLeft = false ] ',
				returns = 'nil | bool assigned',
				description = [[Lua_UnsyncedCtrl; Mass replace all occurrence of the cursor in all CursorCmds. ]],
			},
			SetCustomCommandDrawData = {
				type = 'function',
				args = 'number cmdID, nil',
				returns = 'nil | bool assigned',
				description = [[Lua_UnsyncedCtrl; Register your custom cmd so it gets visible in the unit's cmd queue ]],
			},
			SetShareLevel = {
				type = 'function',
				args = 'string metal | string energy, number shareLevel',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only!Note: shareLevel is 0<= x <= 1 . ]],
			},
			ShareResources = {
				type = 'function',
				args = 'number teamID, string metal | string energy, number amount',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; LuaGadgets only! ]],
			},
			AddUnitIcon = {
				type = 'function',
				args = 'string iconName, string texFile  [, number size  [, number dist  [, bool radAdjust ] ] ] ',
				returns = 'nil | bool added',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			FreeUnitIcon = {
				type = 'function',
				args = 'string iconName',
				returns = 'nil | bool freed',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetUnitDefIcon = {
				type = 'function',
				args = 'number unitDefID, string iconName',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl.Sets radar icon. ]],
			},
			SetUnitDefImage = {
				type = 'function',
				args = 'number unitDefID, string luaTexture | string texFile',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl.Sets buildpic. ]],
			},
			SetCameraState = {
				type = 'function',
				args = 'table camState, number camTime',
				returns = 'nil | bool stateSet',
				description = [[Lua_UnsyncedCtrl; camState has the same format as the output of Spring.GetCameraState(). See [ [Lua_camState] ] for details about camState.The camState's mode/name must fit the rest of the state. Getting a state, changing its mode/name and then passing it to SetCameraState will have undesired results. [https://springrts.com/mantis/view.php?id=5028#c15491] Also see #5028] ]],
			},
			SetCameraTarget = {
				type = 'function',
				args = 'number x, number y, number z  [, number transTime ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; For Spring Engine XZ represents horizontal, from north west corner of map and Y vertical, from water level and rising. ]],
			},
			SetCameraOffset = {
				type = 'function',
				args = 'number px = 0  [, number py = 0  [, number pz = 0  [, number tx = 0  [, number ty = 0  [, number tz = 0 ] ] ] ] ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			ExtractModArchiveFile = {
				type = 'function',
				args = 'string modfile',
				returns = 'bool extracted',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			CreateDir = {
				type = 'function',
				args = 'string path',
				returns = 'nil | bool dirCreated',
				description = [[Lua_UnsyncedCtrl; Needs ModUICtrl. ]],
			},
			SetConfigInt = {
				type = 'function',
				args = 'string name, number value  [, bool useOverlay = false ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetConfigFloat = {
				type = 'function',
				args = 'string name, number value  [, bool useOverlay = false ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}} ]],
			},
			SetConfigString = {
				type = 'function',
				args = 'string name, number value  [, bool useOverlay = false ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|104.0}} ]],
			},
			AddWorldIcon = {
				type = 'function',
				args = 'number cmdID, number x, number y, number z',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			AddWorldText = {
				type = 'function',
				args = 'string text, number x, number y, number z',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			AddWorldUnit = {
				type = 'function',
				args = 'number unitDefID, number x, number y, number z, number team, number facing',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetSunManualControl = {
				type = 'function',
				args = 'bool setManualControl',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{removed|104.0}} ]],
			},
			SetSunParameters = {
				type = 'function',
				args = 'number dirX, number dirY, number dirZ, number dist, number startTime, number orbitTime',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{removed|104.0}} ]],
			},
			SetSunDirection = {
				type = 'function',
				args = 'number dirX, number dirY, number dirZ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetSunLighting = {
				type = 'function',
				args = 'table params',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}}It can be used to modify the following sun lighting parameters: ]],
			},
			SetAtmosphere = {
				type = 'function',
				args = 'table params',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}}It can be used to modify the following atmosphere parameters: ]],
			},
			Reload = {
				type = 'function',
				args = 'string startscript',
				returns = '-',
				description = [[Lua_UnsyncedCtrl; {{new|99.0}}start-script is the CONTENT of the [ [script.txt] ] spring should use to start. ]],
			},
			Restart = {
				type = 'function',
				args = 'string commandline_args, string startscript',
				returns = '-',
				description = [[Lua_UnsyncedCtrl; {{new|0.79}}If this call returns, something went wrong.''commandline_args'' are commandline arguments passed to spring executable. ]],
			},
			Start = {
				type = 'function',
				args = 'string commandline_args, string startscript',
				returns = '-',
				description = [[Lua_UnsyncedCtrl; {{new|102.0}}If this call returns, something went wrong.Launches a new Spring instance without terminating the existing one.start-script is the CONTENT of the [ [script.txt] ] spring should use to start (if empty, no start-script is added, you can still point spring to your custom script.txt when you add the file-path to ''commandline_args''. ]],
			},
			SetWMIcon = {
				type = 'function',
				args = 'string iconFileName',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|83.0}}Sets the icon for the process which is seen in the OS task-bar and other places (default: spring-logo).Note: has to be 24bit or 32bit.Note: on windows, it has to be 32x32 pixels in size (recommended for cross-platform)Note: ''*.bmp'' images have to be in BGR format (default for m$ ones).Note: ''*.ico'' images are not supported. ]],
			},
			SetWMCaption = {
				type = 'function',
				args = 'string title  [, string titleShort = title ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|83.0}}Sets the window ''title'' for the process (default: "Spring ").The ''shortTitle'' is displayed in the OS task-bar (default: "Spring ").'''NOTE:''' ''shortTitle'' is only ever possibly used under X11 (Linux & OS X), but not with QT (KDE) and never under Windows. See [http://www.gpwiki.org/index.php/SDL:Tutorials:Initializing_SDL_Libraries#About_the_icon_.28.22Icon_Title.22.29_parameter_on_different_window-managers this site] for more details. ]],
			},
			ClearWatchDogTimer = {
				type = 'function',
				args = ' [ string threadName = main ] ',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|83.0}} ]],
			},
			SetClipboard = {
				type = 'function',
				args = 'string text',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|98.0}} ]],
			},
			PreloadUnitDefModel = {
				type = 'function',
				args = 'number unitDefID',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{{new|101.0}} ]],
			},
			PreloadFetureDefModel = {
				type = 'function',
				args = 'number featureDefID',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{{new|101.0}} ]],
			},
			AddMapLight = {
				type = 'function',
				args = 'table lightParams',
				returns = 'number lightHandle',
				description = [[Lua_UnsyncedCtrl; (requires MaxDynamicMapLights &gt; 0) ]],
			},
			AddModelLight = {
				type = 'function',
				args = 'table lightParams',
				returns = 'number lightHandle',
				description = [[Lua_UnsyncedCtrl; (requires MaxDynamicMapLights &gt; 0) ]],
			},
			UpdateMapLight = {
				type = 'function',
				args = 'number lightHandle, table lightParams',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			UpdateModelLight = {
				type = 'function',
				args = 'number lightHandle, table lightParams',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetMapLightTrackingState = {
				type = 'function',
				args = 'number lightHandle, number unitOrProjectileID, bool enableTracking, bool unitOrProjectile',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetModelLightTrackingState = {
				type = 'function',
				args = 'number lightHandle, number unitOrProjectileID, bool enableTracking, bool unitOrProjectile',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetSkyBoxTexture = {
				type = 'function',
				args = 'string texName',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}} ]],
			},
			SetMapShadingTexture = {
				type = 'function',
				args = 'string texType, string texName',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}} ]],
			},
			SetMapSquareTexture = {
				type = 'function',
				args = 'number texSqrX, number texSqrY, string luaTexName',
				returns = 'bool success',
				description = [[Lua_UnsyncedCtrl;  ]],
			},
			SetMapShader = {
				type = 'function',
				args = 'number standardShaderID, number deferredShaderID',
				returns = 'nil',
				description = [[Lua_UnsyncedCtrl; {{new|101.0}} ]],
			},
			IsReplay = {
				type = 'function',
				returns = 'nil | bool isReplay',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetReplayLength = {
				type = 'function',
				returns = 'nil | number timeInSeconds',
				description = [[Lua_UnsyncedRead; {{new|92.0}} ]],
				args = '',
			},
			GetSpectatingState = {
				type = 'function',
				returns = 'bool spectating, bool fullView, bool fullSelect',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetGameName = {
				type = 'function',
				returns = 'string name',
				description = [[Lua_UnsyncedRead; {{new|104.0}}Apparently returns {{xtaglink|Modinfo.lua|name}} .. {{xtaglink|Modinfo.lua|version}} from [ [Modinfo.lua] ]. E.g. "Spring: 1944 test-5640-ac2d15b". ]],
				args = '',
			},
			GetMenuName = {
				type = 'function',
				returns = 'string name',
				description = [[Lua_UnsyncedRead; {{new|104.0}} ]],
				args = '',
			},
			GetModUICtrl = {
				type = 'function',
				returns = 'bool ModUICtrl',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMyAllyTeamID = {
				type = 'function',
				returns = 'number allyTeamID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMyTeamID = {
				type = 'function',
				returns = 'number teamID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMyPlayerID = {
				type = 'function',
				returns = 'number playerID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetLocalPlayerID = {
				type = 'function',
				returns = 'number playerID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetLocalTeamID = {
				type = 'function',
				returns = 'number teamID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetLocalAllyTeamID = {
				type = 'function',
				returns = 'number allyID',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetPlayerRoster = {
				type = 'function',
				args = ' [number sortType]  |  [number sortType] ,  [bool showPathingPlayers] ',
				returns = 'nil | table playerTable',
				description = [[Lua_UnsyncedRead; "playerTable" contains: ]],
			},
			GetTeamColor = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | number r, number g, number b, number a',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetTeamOrigColor = {
				type = 'function',
				args = 'number teamID',
				returns = 'nil | number r, number g, number b, number a',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetPlayerTraffic = {
				type = 'function',
				args = 'number playerID  [, number packetID ] ',
				returns = 'number traffic',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetSoundStreamTime = {
				type = 'function',
				returns = 'number playedTime, number totalTime,',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetCameraNames = {
				type = 'function',
				returns = '{  [ = number camNum, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetCameraState = {
				type = 'function',
				returns = '{ "name" = string, "mode" = number camIdx, state1 = number, state2 = number, ... }',
				description = [[Lua_UnsyncedRead; See [ [Lua_camState] ] for details about Spring.GetCameraState output. ]],
				args = '',
			},
			GetCameraPosition = {
				type = 'function',
				returns = 'number x, number y, number z',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetCameraDirection = {
				type = 'function',
				returns = 'number forward_x, number forward_y, number forward_z',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetCameraFOV = {
				type = 'function',
				returns = 'number vFov, number hFov',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetCameraVectors = {
				type = 'function',
				returns = 'table vectorTable',
				description = [[Lua_UnsyncedRead; vectorTable contains: ]],
				args = '',
			},
			GetVisibleUnits = {
				type = 'function',
				args = ' [number teamID = -1  [, number radius = 30  [, bool Icons = true ] ] ] ',
				returns = 'nil | table unitTable = {  [ = number unitID, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetVisibleFeatures = {
				type = 'function',
				args = ' [number allyTeamID = -1  [, number radius = 30  [, bool Icons = true  [, bool geos = true ] ] ] ] ',
				returns = 'nil | table featureTable = {  [ = number featureID, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			IsAABBInView = {
				type = 'function',
				args = 'number minX, number minY, number minZ, number maxX, number maxY, number maxZ',
				returns = 'nil | bool isInView',
				description = [[Lua_UnsyncedRead;  ]],
			},
			IsSphereInView = {
				type = 'function',
				args = 'number x, number y, number z  [, number radius ] ',
				returns = 'nil | bool isInView',
				description = [[Lua_UnsyncedRead;  ]],
			},
			IsUnitIcon = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isUnitIcon',
				description = [[Lua_UnsyncedRead;  ]],
			},
			IsUnitInView = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isUnitInView',
				description = [[Lua_UnsyncedRead;  ]],
			},
			IsUnitVisible = {
				type = 'function',
				args = 'number unitID  [, number radius  [, bool checkIcons ] ] ',
				returns = 'nil | bool isVisible',
				description = [[Lua_UnsyncedRead;  ]],
			},
			WorldToScreenCoords = {
				type = 'function',
				args = 'number x, number y, number z',
				returns = 'number x, number y, number z',
				description = [[Lua_UnsyncedRead;  ]],
			},
			TraceScreenRay = {
				type = 'function',
				args = 'number mouseX, number mouseY,   [, bool onlyCoords  [, bool useMinimap  [, bool includeSky  [, bool ignoreWater  [, number D ] ] ] ] ] ',
				returns = 'nil | string unit, number unitID | string feature, number featureID | string ground, table coords = {  [ = number x,  [ = number y,  [ = number z }',
				description = [[Lua_UnsyncedRead; {{new|101.0}} ]],
			},
			GetPixelDir = {
				type = 'function',
				args = 'number x, number y',
				returns = 'number dirX, number dirY, number dirZ',
				description = [[Lua_UnsyncedRead; {{New|95.0}} ]],
			},
			GetViewGeometry = {
				type = 'function',
				returns = 'number viewSizeX, number viewSizeY, number viewPosX, number viewPosY',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetWindowGeometry = {
				type = 'function',
				returns = 'number winSizeX, number winSizeY, number winPosX, number winPosY',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetScreenGeometry = {
				type = 'function',
				returns = 'number screenSizeX, number screenSizeY, number ZERO, number ZERO',
				description = [[Lua_UnsyncedRead; Is missing multiscreen support! ]],
				args = '',
			},
			IsUnitAllied = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isAllied',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitViewPosition = {
				type = 'function',
				args = 'number unitID  [, bool midPos = false ] ',
				returns = 'nil | number x, number y, number z',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitTransformMatrix = {
				type = 'function',
				args = 'number unitID  [, bool invert = false ] ',
				returns = 'nil | number a11, number a12 ..., number a44 (4x4 matrix)',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitSelectionVolumeData = {
				type = 'function',
				args = 'number unitID',
				returns = 'number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetSelectedUnits = {
				type = 'function',
				returns = '{  [ = number unitID, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetSelectedUnitsSorted = {
				type = 'function',
				returns = '{  [number unitDefID]  = {  [ =  [number unitID] , etc... }, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetSelectedUnitsCounts = {
				type = 'function',
				returns = '{  [number unitDefID]  = number count, etc... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetSelectedUnitsCount = {
				type = 'function',
				returns = 'number count',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			IsUnitSelected = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool isSelected',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitGroup = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | number groupNumber',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetGroupList = {
				type = 'function',
				returns = 'nil | {  [ = number unitCount, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetSelectedGroup = {
				type = 'function',
				returns = 'number groupNumber',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetGroupAIName = {
				type = 'function',
				args = 'number groupID',
				returns = 'string aiName',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetGroupAIList = {
				type = 'function',
				returns = '{  [ = string aiName, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetGroupUnits = {
				type = 'function',
				args = 'number groupID',
				returns = 'nil | {  [ = number unitID, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetGroupUnitsSorted = {
				type = 'function',
				args = 'number groupID',
				returns = 'nil | {  [number unitDefID]  = { number unitID, ... }, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetGroupUnitsCounts = {
				type = 'function',
				args = 'number groupID',
				returns = 'nil | {  [number unitDefID]  = number count, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetGroupUnitsCount = {
				type = 'function',
				args = 'number groupID',
				returns = 'nil | number count',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetFeatureSelectionVolumeData = {
				type = 'function',
				args = 'number unitID',
				returns = 'number scaleX, number scaleY, number scaleZ, number offsetX, number offsetY, number offsetZ, number volumeType, number testType, number primaryAxis, bool disabled',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetVisibleProjectiles = {
				type = 'function',
				args = ' [ number allyTeamID = -1  [, bool addSyncedProjectiles = true  [, bool addWeaponProjectiles = true  [, bool addPieceProjectiles = true ] ] ] ] ',
				returns = 'nil | {  [ = number projectileID, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUICommands = {
				type = 'function',
				returns = 'nil | {  [ = { command=string, description=string, synced=bool, cheat=bool}, ... }',
				description = [[Lua_UnsyncedRead; {{new|101.0}}Returns a list of available [ [UI commands] ]. ]],
				args = '',
			},
			IsGUIHidden = {
				type = 'function',
				returns = 'nil |  bool isHidden',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			HaveShadows = {
				type = 'function',
				returns = 'nil |  bool haveShadows',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			HaveAdvShading = {
				type = 'function',
				returns = 'nil | bool haveShading',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetWaterMode = {
				type = 'function',
				returns = 'nil | number mode, string mode',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMapDrawMode = {
				type = 'function',
				returns = 'nil | string "normal" | string "height" | string "metal" | string "pathTraversability" | string "los"',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetDrawSelectionInfo = {
				type = 'function',
				returns = 'bool drawSelectInfo',
				description = [[Lua_UnsyncedRead; Returns whether &quot;Selected units&quot; text is displayed. ]],
				args = '',
			},
			GetUnitLuaDraw = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool unitDraw',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitNoDraw = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool noDraw',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitNoMinimap = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool noMinimap',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetUnitNoSelect = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil | bool noSelect',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetFeatureLuaDraw = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | bool featureDraw',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetFeatureNoDraw = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil | bool noDraw',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetMiniMapGeometry = {
				type = 'function',
				returns = 'number posX, number posY, number sizeX, number sizeY, bool minimized, bool maximized',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMiniMapDualScreen = {
				type = 'function',
				returns = 'bool false | string "left" | string "right"',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			IsAboveMiniMap = {
				type = 'function',
				args = 'number x, number y',
				returns = 'nil | bool isAbove',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetActiveCommand = {
				type = 'function',
				returns = 'nil | number index  [, number cmd_id, number cmd_type, string cmd_name ] ',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetDefaultCommand = {
				type = 'function',
				returns = 'nil | number index  [, number cmd_id, number cmd_type, string cmd_name ] ',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetActiveCmdDescs = {
				type = 'function',
				returns = 'nil | table cmdDesc',
				description = [[Lua_UnsyncedRead; cmdDesc contains: ]],
				args = '',
			},
			GetActiveCmdDesc = {
				type = 'function',
				returns = 'nil | table cmdDesc',
				description = [[Lua_UnsyncedRead; cmdDesc contains: ]],
				args = '',
			},
			GetCmdDescIndex = {
				type = 'function',
				args = 'number cmdID',
				returns = 'nil | number index',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetActivePage = {
				type = 'function',
				returns = 'nil | number pageNum, number maxPages',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetBuildFacing = {
				type = 'function',
				returns = 'nil | number facing',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetBuildSpacing = {
				type = 'function',
				returns = 'nil | number spacing',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetGatherMode = {
				type = 'function',
				returns = 'nil | number gatherMode',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetInvertQueueKey = {
				type = 'function',
				returns = 'nil | number queueKey',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMouseState = {
				type = 'function',
				returns = 'number x, number y, bool leftPressed, bool middlePressed, bool rightPressed, bool offscreen',
				description = [[Lua_UnsyncedRead; {{new|104.0}} Sixth return value offscreen.X, Y are the screen coordinates, not world ones. This coordinate system starts in the lower left corner. For world coordinates see Spring.TraceScreenRay. ]],
				args = '',
			},
			GetMouseCursor = {
				type = 'function',
				returns = 'string  name, number scale',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetMouseStartPosition = {
				type = 'function',
				args = 'number mouseButton',
				returns = 'nil | number pressedX, number pressedY, number camPosX, number camPosY, number camPosZ, number dirX, number dirY, number dirZ',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetKeyState = {
				type = 'function',
				args = 'number key',
				returns = 'nil | bool keyState',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetModKeyState = {
				type = 'function',
				returns = 'bool alt, bool ctrl, bool meta, bool shift',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetPressedKeys = {
				type = 'function',
				returns = '{  [number code]  = bool,  [string name]  = bool, ... }',
				description = [[Lua_UnsyncedRead; {{new|99.0}}: string nameReturns the SDL1 codes for the pressed keys, first as an integer, a string containing the hex representation.Use Spring.[ [Lua_UnsyncedRead#GetKeySymbol|GetKeySymbol] ] to convert to an SDL2 symbol. ]],
				args = '',
			},
			GetKeyCode = {
				type = 'function',
				args = 'string keysym',
				returns = 'number keyCode',
				description = [[Lua_UnsyncedRead; Returns the SDL1 code for the SDL2 symbol ]],
			},
			GetKeySymbol = {
				type = 'function',
				args = 'number key',
				returns = 'string "keysym1", string "keysym2"',
				description = [[Lua_UnsyncedRead; Converts an SDL1 keycode into an SDL2 keycode, represented as a hexadecimal string. For most cases, these values will be the same. ]],
			},
			GetKeyBindings = {
				type = 'function',
				args = 'string keyset',
				returns = 'nil | table keyBindings',
				description = [[Lua_UnsyncedRead; keyBindings contains: ]],
			},
			GetActionHotKeys = {
				type = 'function',
				args = 'string action',
				returns = 'nil | {  [ = string hotKey, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetLastMessagePositions = {
				type = 'function',
				returns = 'nil | {  [ = { number x, number y, number z }, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetConsoleBuffer = {
				type = 'function',
				args = ' [number maxLines] ',
				returns = 'nil | {  [ = { text = string, priority = number }, ... }',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetCurrentTooltip = {
				type = 'function',
				returns = 'string tooltip',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetLosViewColors = {
				type = 'function',
				returns = 'table always = {r,g,b}, table LOS = {r,g,b}, table radar = {r,g,b}, table jam = {r,g,b}, table radar2 = {r,g,b}',
				description = [[Lua_UnsyncedRead; {{new|100}} ]],
				args = '',
			},
			GetConfigParams = {
				type = 'function',
				returns = 'table configParams',
				description = [[Lua_UnsyncedRead; Same information as spring --list-config-varsconfigParams contains: ]],
				args = '',
			},
			GetConfigInt = {
				type = 'function',
				args = 'string name  [, number default ] ',
				returns = 'nil | number configInt',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetConfigFloat = {
				type = 'function',
				args = 'string name  [, number default ] ',
				returns = 'nil | number configFloat',
				description = [[Lua_UnsyncedRead; {{new|104.0}} ]],
			},
			GetConfigString = {
				type = 'function',
				args = 'string name  [, number default ] ',
				returns = 'nil | string configString',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetFPS = {
				type = 'function',
				returns = 'number fps',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetDrawFrame = {
				type = 'function',
				returns = 'number low_16bit, number high_16bit',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetVideoCapturingMode = {
				type = 'function',
				returns = 'bool videoCaptureAllowed',
				description = [[Lua_UnsyncedRead; {{new|104.0}} ]],
				args = '',
			},
			GetGameState = {
				type = 'function',
				returns = 'bool finishedLoading, bool loadedFromSave, bool locallyPaused, bool laggingWrtExpectedFromSimtime',
				description = [[Lua_UnsyncedRead; {{new|105.0}} ]],
				args = '',
			},
			GetFrameTimeOffset = {
				type = 'function',
				returns = 'nil | number offset',
				description = [[Lua_UnsyncedRead; Gets globalRendering->timeOffset, which contains the offset of the current draw frame from the last sim frame, expressed in fractions of a frame. Ideally, when running 30hz sim, and 60hz rendering, the draw frames should have and offset of either 0.0 frames, or 0.5 frames. When draw frames are not integer multiples of sim frames, some interpolation happens, and this timeoffset shows how far along it is. ]],
				args = '',
			},
			GetLastUpdateSeconds = {
				type = 'function',
				returns = 'nil | number lastUpdateSeconds',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetHasLag = {
				type = 'function',
				returns = 'bool hasLag',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetTimer = {
				type = 'function',
				returns = 'timer',
				description = [[Lua_UnsyncedRead; This function returns a timer type object, which we can use a pair of to calculate the time difference between two timer objects with DiffTimers. However, this time is at best millisecond resolution. ]],
				args = '',
			},
			GetFrameTimer = {
				type = 'function',
				args = ' [ bool lastFrameTime ] ',
				returns = 'timer',
				description = [[Lua_UnsyncedRead; {{new|102.0}}Get a timer for the start of the frame, this should give better results for camera interpolations. If given an optional boolean true, then it returns the game->lastFrameTime instead of the lastFrameStart ]],
			},
			DiffTimers = {
				type = 'function',
				args = 'timer cur, timer ago  [, bool inMilliseconds ] ',
				returns = 'number seconds',
				description = [[Lua_UnsyncedRead; {{New|95.0}}Optional third argument (boolean) to return dt in milliseconds. ]],
			},
			GetMapSquareTexture = {
				type = 'function',
				args = 'number texSqrX, number texSqrY, number texMipLvl, string luaTexName',
				returns = 'bool success',
				description = [[Lua_UnsyncedRead;  ]],
			},
			GetLogSections = {
				type = 'function',
				returns = 'table logSections = { "KeyBindings" = LOG.INFO, "Font" = LOG.INFO, "Sound" = LOG.WARNING, ... }',
				description = [[Lua_UnsyncedRead;  ]],
				args = '',
			},
			GetClipboard = {
				type = 'function',
				returns = 'string text',
				description = [[Lua_UnsyncedRead; {{new|98.0}} ]],
				args = '',
			},
		},
	},
	gl = {
		type = 'lib',
		description = [[gl ]],
		childs = {
			GetSun = {
				type = 'function',
				args = 'string "specular"  [, string "unit" ] ',
				returns = 'nil | number r, number g, number b',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetAtmosphere = {
				type = 'function',
				args = 'string name',
				returns = 'number r, number g, number b',
				description = [[Lua_OpenGL_Api; {{new|101.0}}See [ [Lua_UnsyncedCtrl#Sun|Spring.SetAtmosphere] ] for details. ]],
			},
			GetWaterRendering = {
				type = 'function',
				args = 'string name',
				returns = 'nil | number r, number g, number b | string texName | bool active',
				description = [[Lua_OpenGL_Api; {{new|104.0}}See [ [Lua_UnsyncedCtrl#Developers|Spring.SetWaterParams] ] for details. ]],
			},
			GetMapRendering = {
				type = 'function',
				args = 'string name',
				returns = 'nil | number r, number g, number b | bool active',
				description = [[Lua_OpenGL_Api; {{new|104.0}}See [ [Lua_UnsyncedCtrl#Developers|Spring.SetMapRenderingParams] ] for details. ]],
			},
			ConfigScreen = {
				type = 'function',
				args = 'number screenWidth, number screenDistance',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Used for Unit LODs. ]],
			},
			DrawMiniMap = {
				type = 'function',
				args = 'bool transform = true',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			SlaveMiniMap = {
				type = 'function',
				args = 'bool mode',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			ConfigMiniMap = {
				type = 'function',
				args = 'number intPX, number intPY, number intSX, number intSY',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetViewSizes = {
				type = 'function',
				returns = 'number x, number y',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			Viewport = {
				type = 'function',
				args = 'number x, number y, number w, number h',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PushMatrix = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			PopMatrix = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			Translate = {
				type = 'function',
				args = 'number x, number y, number z',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Scale = {
				type = 'function',
				args = 'number angle, number x, number y, number z',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Billboard = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Use this to draw 2d primitives in DrawWorld(). ]],
				args = '',
			},
			MatrixMode = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#MatrixMode|mode] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			LoadIdentity = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			LoadMatrix = {
				type = 'function',
				args = '16 numbers or a [https://github.com/spring/spring/blob/develop/rts/Lua/LuaOpenGLUtils.cpp#L60 matrix name]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			MultMatrix = {
				type = 'function',
				args = '???',
				returns = '???',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Ortho = {
				type = 'function',
				args = 'number left, number right, number bottom, number top, number near, number far',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Frustum = {
				type = 'function',
				args = 'number left, number right, number bottom, number top, number near, number far',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PushPopMatrix = {
				type = 'function',
				args = '???',
				returns = '???',
				description = [[Lua_OpenGL_Api;  ]],
			},
			ClipPlane = {
				type = 'function',
				args = 'number intPlane, bool enable | number A, number B, number C, number D',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Note: intPlane can only be 1 or 2. ]],
			},
			Clear = {
				type = 'function',
				args = 'GL.COLOR_BUFFER_BIT | GL.ACCUM_BUFFER_BIT  [, number r, number g, number b, number a ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			SwapBuffers = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|104.0}}Available only in LuaMenu, meant for frame-limited LuaMenu's that want identical content in both buffers. ]],
				args = '',
			},
			ResetState = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; DON'T USE IT UNLESS YOU KNOW WHAT YOU ARE DOING! Each call-in has different default states, but this function resets all states to the states below no matter what! ]],
				args = '',
			},
			ResetMatrices = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			BeginEnd = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Drawing_Primitives|GLType] ], function  [, arg1, ... ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Color = {
				type = 'function',
				args = 'number r,  number g,  number b  [,  number a ]  | table colors = { number r,  number g,  number b  [,  number a ]  }',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Vertex = {
				type = 'function',
				args = 'number x,  number y,  number z, number w',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Normal = {
				type = 'function',
				args = 'table normal = { number x,  number y,  number z } | number x,  number y,  number z',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			EdgeFlag = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Rect = {
				type = 'function',
				args = 'number x1, number y1, number x2, number y2',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			TexRect = {
				type = 'function',
				args = 'number x1, number y1, number x2, number y2  [, bool flip_s, bool flip_t | number s1, number t1, number s2, number t2 ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Texture rect. ]],
			},
			Shape = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Drawing_Primitives|GLtype] ], table elements',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Elements contains: ]],
			},
			SecondaryColor = {
				type = 'function',
				args = 'table color = { number r, number g, number b } | number r, number g, number b',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			FogCoord = {
				type = 'function',
				args = 'number value',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			CreateList = {
				type = 'function',
				args = 'function  [, arg1  [, arg2 ... ] ] ',
				returns = 'number listID',
				description = [[Lua_OpenGL_Api;  ]],
			},
			CallList = {
				type = 'function',
				args = 'number listID',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DeleteList = {
				type = 'function',
				args = 'number listID',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			CreateVertexArray = {
				type = 'function',
				args = 'number numElements, number numIndices  [, bool persistentBuffer = false ] ',
				returns = 'number bufferID',
				description = [[Lua_OpenGL_Api;  ]],
			},
			UpdateVertexArray = {
				type = 'function',
				args = 'number bufferID, number elementPos, number indexPos, table tbl | function func',
				returns = 'bool success',
				description = [[Lua_OpenGL_Api;  ]],
			},
			RenderVertexArray = {
				type = 'function',
				args = 'number bufferID, number primType  [, number firstIndex = 0, number count = numElements ] ',
				returns = 'bool success',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DeleteVertexArray = {
				type = 'function',
				args = 'number bufferID',
				returns = 'bool success',
				description = [[Lua_OpenGL_Api; Releases previously allocated VAO ]],
			},
			Text = {
				type = 'function',
				args = 'string "text", number x, number y, number size  [, string "options" ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetTextWidth = {
				type = 'function',
				args = 'string "text"',
				returns = 'number width',
				description = [[Lua_OpenGL_Api; Width in pixels, with a font size of 1.0. ]],
			},
			GetTextHeight = {
				type = 'function',
				args = 'string "text"',
				returns = 'nil | number height, number descender, number numlines',
				description = [[Lua_OpenGL_Api; Height in pixels, with a font size of 1.0. Further descriptions here: [ [GetTextHeight] ] ]],
			},
			BeginText = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; If you have multiple gl.Text calls, then you can bunch them between a gl.BeginText and gl.EndText to speedup the rendering. ]],
				args = '',
			},
			EndText = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			Unit = {
				type = 'function',
				args = 'number unitID  [, bool rawdraw, number intLOD ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Draws a unit - on default it uses LOD, with lod<0 it is turned off, else it defines a specific level. ]],
			},
			UnitRaw = {
				type = 'function',
				args = 'number unitID  [, bool rawdraw, number intLOD ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Doesn't apply worldspace->unit transformation! only works if rawdraw is true. ]],
			},
			UnitShape = {
				type = 'function',
				args = 'number unitDefID, number teamID, bool rawState, bool toScreen, bool opaque',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}}The three extra boolean arguments make it so that calling only these functions is enough to get correctly rendered models; pass in 'false' for the THIRD argument to get the fixed behavior, omit it or pass in 'true' [default] to render with your own custom state instead. The FOURTH argument should be 'true' if in DrawScreen and 'false' (default) if in DrawWorld; any transforms for these two functions *MUST* include a gl.LoadIdentity call when argument #3 is false (whether they are used in DrawWorld or in DrawScreen) the FIFTH argument determines whether the model is drawn opaque ('true' [default]) or with translucency ('false'); only has an effect when argument #3 is false. ]],
			},
			UnitMultMatrix = {
				type = 'function',
				args = 'number unitID',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; world space -> unit space ]],
			},
			UnitPieceMultMatrix = {
				type = 'function',
				args = 'number unitID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; unit space -> piece space ]],
			},
			UnitPiece = {
				type = 'function',
				args = 'number unitID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Draws the unit piece. ]],
			},
			UnitPieceMatrix = {
				type = 'function',
				args = 'number unitID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Use gl.UnitPieceMultMatrix instead! ]],
			},
			Feature = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			FeatureRaw = {
				type = 'function',
				args = 'number featureID  [, bool rawdraw, number intLOD ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}} ]],
			},
			FeatureShape = {
				type = 'function',
				args = 'number featureDefID, number teamID, bool custom, bool drawScreen, bool opaque',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			FeatureMultMatrix = {
				type = 'function',
				args = 'number featureID',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}}world space -> feature space ]],
			},
			FeaturePieceMultMatrix = {
				type = 'function',
				args = 'number featureID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}}feature space -> piece space ]],
			},
			FeaturePiece = {
				type = 'function',
				args = 'number featureID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}}Draws the Feature piece. ]],
			},
			FeaturePieceMatrix = {
				type = 'function',
				args = 'number featureID, number intPiece',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{new|101.0}}Use gl.FeaturePieceMultMatrix instead! ]],
			},
			DrawListAtUnit = {
				type = 'function',
				args = 'number unitID, number listID  [, bool midPos, number scaleX, number scaleY, number scaleZ, number degrees, number rotX, number rotY, number rotZ ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DrawFuncAtUnit = {
				type = 'function',
				args = 'number unitID, bool midPos, function  [, arg1, ... ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Blending = {
				type = 'function',
				args = 'string mode',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Mode can be set to: ]],
			},
			BlendEquation = {
				type = 'function',
				args = 'number mode',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			BlendFunc = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#BlendingFactorSrc|srcmode] ], number [ [Lua_ConstGL#BlendingFactorDest|dstmode] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			BlendEquationSeparate = {
				type = 'function',
				args = 'number modeRGB, number modeAlpha',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs openGL2.0! ]],
			},
			BlendFuncSeparate = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#BlendingFactorSrc|srcRGB] ], number [Lua_ConstGL#BlendingFactorDest|dstRGB] ], number [ [Lua_ConstGL#BlendingFactorSrc|srcAlpha] ], number [ [Lua_ConstGL#BlendingFactorDest|dstAlpha] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs openGL2.0! ]],
			},
			AlphaTest = {
				type = 'function',
				args = 'bool enable | number [ [Lua_ConstGL#AlphaFunction and  DepthFunction|func] ], number threshold',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DepthTest = {
				type = 'function',
				args = 'bool enable | number [ [Lua_ConstGL#AlphaFunction and  DepthFunction|func] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Culling = {
				type = 'function',
				args = 'bool enable | number [ [Lua_ConstGL#Culling|face] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DepthClamp = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Not always available, needs GL.NV_depth_clamp! ]],
			},
			DepthMask = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			ColorMask = {
				type = 'function',
				args = 'bool r, bool g, bool b, bool a',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			LogicOp = {
				type = 'function',
				args = 'bool enable | number [ [Lua_ConstGL#LogicOp|func] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Fog = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Smoothing = {
				type = 'function',
				args = 'bool enable | number point, bool enable | number line, bool enable | number polygon',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; {{removed|104.0}} ]],
			},
			Scissor = {
				type = 'function',
				args = 'number intX, number intY, number intW, number intH',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			LineStipple = {
				type = 'function',
				args = 'number intFactor, number pattern',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PolygonMode = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Culling|face] ], number [ [Lua_ConstGL#PolygonMode|mode] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PolygonOffset = {
				type = 'function',
				args = 'bool enable | number factor, number units',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PushAttrib = {
				type = 'function',
				args = ' [ number [ [Lua_ConstGL#glPushAttrib.28.29_bits|attrib] ] ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PopAttrib = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			StencilTest = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			StencilMask = {
				type = 'function',
				args = 'number mask',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			StencilFunc = {
				type = 'function',
				args = 'number func, number ref, number mask',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			StencilOp = {
				type = 'function',
				args = 'number fail, number zfail, number zpass',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			StencilMaskSeparate = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Culling|face] ], number mask',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs OpenGL2.0! ]],
			},
			StencilFuncSeparate = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Culling|face] ], number func, number ref, number mask',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs OpenGL2.0! ]],
			},
			StencilOpSeparate = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Culling|face] ], number fail, number zfail, number zpass',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs OpenGL2.0! ]],
			},
			LineWidth = {
				type = 'function',
				args = 'number width',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			PointSize = {
				type = 'function',
				args = 'number size',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Values != 1 can break severely on ATI cards, see http://springrts.com/mantis/view.php?id=2390 ]],
			},
			PointSprite = {
				type = 'function',
				args = 'bool enable  [, bool coord_replace, bool coord_origin_upper ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs OpenGL2.0! ]],
			},
			PointParameter = {
				type = 'function',
				args = 'number v1, number v2, number v3  [, number sizeMin, number sizeMax, number sizeFade ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs OpenGL2.0! ]],
			},
			Texture = {
				type = 'function',
				args = ' [ number texNum, ]  bool enable | string name',
				returns = 'nil | bool loaded',
				description = [[Lua_OpenGL_Api; This is the only call-out that is needed to load and draw any texture in a Lua script. All you have to do is pass it a valid path to a valid png and it will use that image for drawing any subsequent textured rectangles. This is shown in the last line of the following list of valid strings for the name parameter. ]],
			},
			CreateTexture = {
				type = 'function',
				args = 'number intXSize, number intYSize  [, table texProps ] ',
				returns = 'string texture',
				description = [[Lua_OpenGL_Api; texProps contains: ]],
			},
			DeleteTexture = {
				type = 'function',
				args = 'string texture',
				returns = 'bool deleted',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DeleteTextureFBO = {
				type = 'function',
				args = 'string texture',
				returns = 'bool deleted',
				description = [[Lua_OpenGL_Api; Needs GLEW_EXT_framebuffer_object! ]],
			},
			TextureInfo = {
				type = 'function',
				args = 'string texture',
				returns = 'nil | table texInfo',
				description = [[Lua_OpenGL_Api; texInfo contains: ]],
			},
			MultiTexCoord = {
				type = 'function',
				args = 'number x  [, number y  [, number z  [, number w ] ] ]  | table texCoords = { number x  [, number y  [, number z  [, number w ] ] ]  }',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			TexEnv = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Texture_Environment|target] ], number [ [Lua_ConstGL#Texture_Environment|pname] ], number var1, number var2, number var3',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			MultiTexEnv = {
				type = 'function',
				args = 'number texNum, number [ [Lua_ConstGL#Texture_Environment|target] ], number [ [Lua_ConstGL#Texture_Environment|pname] ], number var1, number var2, number var3',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			TexGen = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#Texture_Generation|target] ], bool [ [Lua_ConstGL#Texture_Environment|pname] ], number var1, number var2, number var3',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			MultiTexGen = {
				type = 'function',
				args = 'number intTexNum, number [ [Lua_ConstGL#Texture_Generation|target] ], number [ [Lua_ConstGL#Texture_Environment|pname] ], number var1, number var2, number var3',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			CopyToTexture = {
				type = 'function',
				args = 'string texture, number intXOff, number intYOff, number intX, number intY, number intW, number intH  [, number target, number level ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			RenderToTexture = {
				type = 'function',
				args = 'string fbotexture, function lua_func',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs GLEW_EXT_framebuffer_object! ]],
			},
			GenerateMipmap = {
				type = 'function',
				args = 'string texture',
				returns = 'bool created',
				description = [[Lua_OpenGL_Api; Needs glGenerateMipmapEXT! ]],
			},
			UnitTextures = {
				type = 'function',
				args = 'number unitID, bool enable',
				returns = 'bool enabled',
				description = [[Lua_OpenGL_Api;  ]],
			},
			UnitShapeTextures = {
				type = 'function',
				args = 'number unitDefID, bool enable',
				returns = 'bool enabled',
				description = [[Lua_OpenGL_Api;  ]],
			},
			FeatureTextures = {
				type = 'function',
				args = 'number featureID, bool enable',
				returns = 'bool enabled',
				description = [[Lua_OpenGL_Api;  ]],
			},
			FeatureShapeTextures = {
				type = 'function',
				args = 'number featureDefID, bool enable',
				returns = 'bool enabled',
				description = [[Lua_OpenGL_Api;  ]],
			},
			SaveImage = {
				type = 'function',
				args = 'number x, number y, number w, number h, string filename  [, table imgProps = { alpha=bool, yflip=bool, grayscale16bit=bool, readbuffer=number } ] ',
				returns = 'nil | bool success',
				description = [[Lua_OpenGL_Api; grayscale16bit is {{new|99.0}} and allows to save single color 16bit PNG
readbuffer is {{new|104+}} and allows to choose the attachment of MRT FBO, use GL_COLOR_ATTACHMENT0_EXT and further as index ]],
			},
			ReadPixels = {
				type = 'function',
				args = 'number x, number y, number w, number h  [, number format = GL.RGBA ] ',
				returns = 'nil | number r  [, g  [, b  [, a {rbracket}}{rbracket}}{rbracket}} | table readPixels = { { { 1 = number r, 2 = number g, 3 = number b, 4 = number a}, ... }, ... }',
				description = [[Lua_OpenGL_Api; This reads back pixels from the final rendered screen. E.g. you can make a screenshot by grabbing the whole view. ]],
			},
			Lighting = {
				type = 'function',
				args = 'bool enable',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			ShadeModel = {
				type = 'function',
				args = 'number [ [Lua_ConstGL#ShadeModel|mode] ]',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Light = {
				type = 'function',
				args = 'number intLight, number [ [Lua_ConstGL#Light_Specification|pname] ], number param1, number param2, number param3',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Material = {
				type = 'function',
				args = 'table material',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; material contains: ]],
			},
			HasExtension = {
				type = 'function',
				args = 'string extname',
				returns = 'bool hasExtension',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetNumber = {
				type = 'function',
				args = 'number ext, number intCount',
				returns = 'number number1  [, number number2, number number3, ... #count ] ',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetString = {
				type = 'function',
				args = 'number ext',
				returns = 'string extString',
				description = [[Lua_OpenGL_Api;  ]],
			},
			DrawGroundCircle = {
				type = 'function',
				args = 'number x, number y, number z, number radius, number divs  [, number slope ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Note: Number divs is the number of sides the circle will have. The higher the smoother the circle (and more GPU intensive). ]],
			},
			DrawGroundQuad = {
				type = 'function',
				args = 'number x1, number z1, number x2, number z2  [, bool useNorm  [, number tu1, number tv1, number tu2, number tv2 ]  |  [ bool useTextureCoord ]  ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Note: x1, z1, x2 & z2 are rounded, so don't use it for very small or moving objects. x and z correspond to the coordinates displayed by the tooltip.Also note: useNorm does nothing! ]],
			},
			CreateQuery = {
				type = 'function',
				returns = 'nil | userdata query',
				description = [[Lua_OpenGL_Api; Needs >=OpengGL2.0! ]],
				args = '',
			},
			DeleteQuery = {
				type = 'function',
				args = 'userdata query',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs >=OpengGL2.0! ]],
			},
			RunQuery = {
				type = 'function',
				args = 'userdata query, function func, arg1, arg2, ...',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Needs >=OpengGL2.0! ]],
			},
			GetQuery = {
				type = 'function',
				args = 'userdata query',
				returns = 'nil | number renderedFragments',
				description = [[Lua_OpenGL_Api;  ]],
			},
			ActiveTexture = {
				type = 'function',
				args = 'number intTexNum, function func  [, arg1, ... ] ',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
			},
			GetGlobalTexNames = {
				type = 'function',
				returns = 'table texNames = {  [ = string texture, etc ...  }',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			GetGlobalTexCoords = {
				type = 'function',
				args = 'string 3doTextureName',
				returns = 'number xstart, number ystart, number xend, number yend',
				description = [[Lua_OpenGL_Api; Gets the texcoord of a 3do texture in the 3do texture atlas. ]],
			},
			UnsafeState = {
				type = 'function',
				args = 'number state   [, bool disable_state ] , bool func, arg1, arg2, ...',
				returns = 'nil',
				description = [[Lua_OpenGL_Api; Calls glEnable(state) or glDisable(state) (if disable_state==true) andthen calls the lua_function and afterwards reverts the state. ]],
			},
			GetShadowMapParams = {
				type = 'function',
				returns = 'number xmid, number ymid, number p17, number p18',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			GetMatrixData = {
				type = 'function',
				args = 'string "billboard"',
				returns = 'nil | number number1, etc...',
				description = [[Lua_OpenGL_Api;  ]],
			},
			Flush = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			Finish = {
				type = 'function',
				returns = 'nil',
				description = [[Lua_OpenGL_Api;  ]],
				args = '',
			},
			CreateShader = {
				type = 'function',
				args = 'table shaderParams',
				returns = 'number shaderID',
				description = [[Lua_GLSL_Api; Create a shader from shaderParams table:

({[ vertex   = "glsl code" ,]
[ tcs      = "glsl code" ,]
[ tes      = "glsl code" ,]
[ geometry = "glsl code" ,]
[ fragment = "glsl code" ,]
[ uniform       = { uniformName = number value, ...} ,] (specify a Lua array as an argument to uniformName to initialize GLSL arrays)
[ uniformInt    = { uniformName = number value, ...} ,] (specify a Lua array as an argument to uniformName to initialize GLSL arrays)
[ uniformFloat  = { uniformName = number value, ...} ,] (specify a Lua array as an argument to uniformName to initialize GLSL arrays)
[ uniformMatrix = { uniformName = number value, ...} ,]
[ geoInputType = number inType,]
[ geoOutputType = number outType,]
[ geoOutputVerts = number maxVerts,]
[ definitions = "string of shader #defines", ]
})

* The "Vertex" or vertex-shader is your GLSL-Code as string, its written in a C-Dialect. This shader is busy deforming the geometry of a unit but it can not create new polygons. Use it for waves, wobbling surfaces etc.

* The "Geometry" or Geometry-shader can create new vertices and vertice-stripes from points.

* The "TCS" or Tesselation Control Shader controls how much tessellation a particular patch gets; it also defines the size of a patch, thus allowing it to augment data. It can also filter vertex data taken from the vertex shader. The main purpose of the TCS is to feed the tessellation levels to the Tessellation primitive generator stage, as well as to feed patch data (as its output values) to the Tessellation Evaluation Shader stage. TCS shader can be used with spring version >= 104.0.1-596 (maintenance), it's also available in develop branch of spring.

* The "TES" or Tesselation Evaluation Shader takes the abstract patch generated by the tessellation primitive generation stage, as well as the actual vertex data for the entire patch, and generates a particular vertex from it. Each TES invocation generates a single vertex. It can also take per-patch data provided by the Tessellation Control Shader. TES shader can be used with spring version >= 104.0.1-596 (maintenance), it's also available in develop branch of spring.

* The "Fragment" or Fragment-shader (sometimes called pixel-Shader) is post processing the allready rendered picture (for example drawing stars on the sky)- remember textures are not always 2 dimensional pictures. They can contain information about the depth, or the third value marks areas and the strength at which these are processed.

* The Uniforms are the values, you send along with the shader-program. To use them in the shader-program declare them like this:
uniform float frame;

* From 101.0 onwards, the engine will automatically fill in an appropriately named uniform for team colour if it is declared;
uniform vec4 teamColor; ]],
			},
			DeleteShader = {
				type = 'function',
				args = 'number shaderID',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Deletes a shader identified by shaderID ]],
			},
			ActiveShader = {
				type = 'function',
				args = 'number shaderID, function func  [, arg1  [, arg2 ... ]   ] ',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Binds a shader program identified by shaderID, and calls the Lua func with the specified arguments. Can be used in NON-drawing events (to update uniforms etc.)! ]],
			},
			UseShader = {
				type = 'function',
				args = 'number shaderID',
				returns = 'bool linked',
				description = [[Lua_GLSL_Api; Binds a shader program identified by shaderID. Pass 0 to disable the shader. Returns wether the shader was successfully bound. ]],
			},
			GetShaderLog = {
				type = 'function',
				returns = 'string infoLog',
				description = [[Lua_GLSL_Api; Returns the shader compilation error log. This is empty if the shader linking failed, in that case, check your in/out blocks and ensure they match. ]],
				args = '',
			},
			SetGeometryShaderParameter = {
				type = 'function',
				args = 'number shaderID, number param, number number',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the Geometry shader parameters for shaderID. Needed by geometry shader programs (check the opengl GL_ARB_geometry_shader4 extension for glProgramParameteri)  Was called SetShaderParameter before  104.0.1-596 (maintenance) ]],
			},
			SetTesselationShaderParameter = {
				type = 'function',
				args = 'number param, number number',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the tesselation shader parameters for shaderID. Needed by tesselation shader programs (check the opengl GL_ARB_tessellation_shader extension for glProgramParameteri)  Introduced in 104.0.1-596 (maintenance) ]],
			},
			GetActiveUniforms = {
				type = 'function',
				args = 'number shaderID',
				returns = 'table ActiveUniforms = { { name = "name", type = "type", length = number length, size = number size }, ...}',
				description = [[Lua_GLSL_Api; Query the active (actually used) uniforms of a shader and identify their names, types (float, int, uint) and sizes (float, vec4, ...). ]],
			},
			GetUniformLocation = {
				type = 'function',
				args = 'number shaderID, string "name"',
				returns = 'number locationID',
				description = [[Lua_GLSL_Api; Returns the locationID of a shaders uniform. Needed for changing uniform values with gl.Uniform. ]],
			},
			Uniform = {
				type = 'function',
				args = 'number locationID, number  f1  [, number  f2  [, number  f3  [, number  f4 ]  ]  ] ',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the uniform float value at the locationID for the currently active shader. Shader must be activated before setting uniforms. ]],
			},
			UniformInt = {
				type = 'function',
				args = 'number locationID, number  int1  [, number  int2  [, number  int3  [, number  int4 ]  ]  ] ',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the uniform int value at the locationID for the currently active shader. Shader must be activated before setting uniforms. ]],
			},
			UniformArray = {
				type = 'function',
				args = 'number locationID, number  type, table  uniforms',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the an array of uniform values at the locationID for the currently active shader. Shader must be activated before setting uniforms. Type can be one of {1 = int, 2 = float, 3 = float matrix}. In 104.0 the maximum length of the uniforms table increased from 32 entries to 1024. ]],
			},
			UniformMatrix = {
				type = 'function',
				args = 'number locationID, string "shadows" | "camera" | "caminv" | "camprj" | number m1, number m2, number m3, number m4, number m5, number m6, number m7, number m8 ... , m16',
				returns = 'nil',
				description = [[Lua_GLSL_Api; Sets the a uniform mat4 locationID for the currently active shader. Shader must be activated before setting uniforms. Can set one one common matrix like shadow, or by passing 16 additional numbers for the matrix. ]],
			},
		},
	},
	math = {
		type = 'lib',
		description = [[math ]],
		childs = {
			bit_and = {
				type = 'function',
				args = 'number a1, number a2 , ...',
				returns = 'number i',
				description = [[Lua_BitOps; Returns the bitwise AND of all arguments. Only use up to 24 bit integers. ]],
			},
			bit_or = {
				type = 'function',
				args = 'number a1, number a2 , ...',
				returns = 'number i',
				description = [[Lua_BitOps; Returns the bitwise OR of all arguments. Only use up to 24 bit integers. ]],
			},
			bit_xor = {
				type = 'function',
				args = 'number a1, number a2 , ...',
				returns = 'number i',
				description = [[Lua_BitOps; Returns the bitwise XOR of all arguments. Only use up to 24 bit integers. ]],
			},
			bit_inv = {
				type = 'function',
				args = 'number a1',
				returns = 'number i',
				description = [[Lua_BitOps; Returns the bitwise NOT of the 24 bit integer argument. ]],
			},
			bit_bits = {
				type = 'function',
				args = 'number a1, number a2 , ...',
				returns = 'number i',
				description = [[Lua_BitOps; Set each of the bits of a 24 bit integer. Returns result = result OR (1 << a1) OR (1 << a2) OR ...;) ]],
			},
			clamp = {
				type = 'function',
				args = 'number x, number min, number max',
				returns = 'number clamped',
				description = [[Lua_MathExtra; Returns x clamped to min and max boundaries. ]],
			},
			diag = {
				type = 'function',
				args = 'number x1, number x2, number x3, ...',
				returns = 'number diagonal',
				description = [[Lua_MathExtra; Returns the length of the diagonal of an n-dimensional box (or the length of an n-component vector). Rather quick method that does not handle intermediate overflows/underflows nor is made for numerical stability. ]],
			},
			erf = {
				type = 'function',
				args = 'number x',
				returns = 'number erf',
				description = [[Lua_MathExtra; Returns [http://en.wikipedia.org/wiki/Error_function erf](x). ]],
			},
			hypot = {
				type = 'function',
				args = 'number x, number y',
				returns = 'number sqrt(x*x+y*y)',
				description = [[Lua_MathExtra; Returns the length of hypotenuse of right angle triangle with sides x and y, equivalent to sqrt(x*x + y*y), but has better numerical stability and internally handles intermediate overflows/underflows, but is also slower. ]],
			},
			mix = {
				type = 'function',
				args = 'number x, number y, number a',
				returns = 'number (x+(y-x)*a)',
				description = [[Lua_MathExtra; Returns linear interpolation between x and y with ratio a (x+(y-x)*a). ]],
			},
			round = {
				type = 'function',
				args = 'number x, number decimals',
				returns = 'number rounded',
				description = [[Lua_MathExtra; Returns x rounded to n decimals, if n is omitted or <=0, rounds to nearest integer. Note that Spring's Lua interpreter uses 32-bit floats for all numbers so max. precision is ~7 decimal digits. ]],
			},
			sgn = {
				type = 'function',
				args = 'number x',
				returns = 'number sign',
				description = [[Lua_MathExtra; Returns 0 if x ==0, 1 if x > 0, -1 if x < 0 [http://en.wikipedia.org/wiki/Sign_function sgn](x). ]],
			},
			smoothstep = {
				type = 'function',
				args = 'number edge0, number edge1, number x',
				returns = 'number smoothstep',
				description = [[Lua_MathExtra; Returns [http://en.wikipedia.org/wiki/Smoothstep smoothstep](edge0, edge1, v). ]],
			},
		},
	},
	widget = {
		type = 'class',
		description = [[The widget handler, note that UnsyncedCtrl is not available from here ]],
		childs = {
			Initialize = {
				type = 'method',
				description = [[Called when the addon is (re)loaded. ]],
				args = '',
				returns = 'nil',
			},
			Shutdown = {
				type = 'method',
				description = [[Called when the addon or the game is shutdown. ]],
				args = '',
				returns = 'nil',
			},
			DefaultCommand = {
				type = 'method',
				description = [[Used to set the default command when a unit is selected. First parameter is the type of the object pointed at (either "unit or "feature") and the second is its {{var|unitID}} or {{var|featureID}} respectively. ]],
				args = 'type, id',
				returns = 'number cmdID',
			},
			CommandNotify = {
				type = 'method',
				description = [[Called when a command is issued. Returning {{value|true}} deletes the command and does not send it through the network. ]],
				args = 'cmdID, cmdParams, cmdOptions',
				returns = 'bool removeCmd',
			},
			CommandsChanged = {
				type = 'method',
				description = [[Called when the command descriptions changed, e.g. when selecting or deselecting a unit. ]],
				args = 'None',
				returns = '?',
			},
			WorldTooltip = {
				type = 'method',
				description = [[The parameters can be {{value|"unit"}}, {{var|unitID}}; {{value|"feature"}}, {{var|featureID}}; {{value|"ground"}}, {{var|posX}}, {{var|posY}}, {{var|posZ}} or {{value|"selection"}}. ]],
				args = 'ttType, data1, data2, data3',
				returns = 'string newTooltip',
			},
			UnsyncedHeightMapUpdate = {
				type = 'method',
				description = [[Called when the unsynced copy of the height-map is altered. ]],
				args = '???',
				returns = 'nil',
			},
			GameProgress = {
				type = 'method',
				description = [[Called every 60 frames, calculating delta between GameFrame and GameProgress. Can give an ETA about catching up with simulation for mid-game join players. ]],
				args = 'serverFrameNum',
				returns = 'nil',
			},
			GameSetup = {
				type = 'method',
				description = [[??? ]],
				args = 'state, ready, playerStates',
				returns = 'bool success, bool newReady',
			},
			SunChanged = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			AddConsoleLine = {
				type = 'method',
				description = [[Called when text is entered into the console (e.g. Spring.Echo). ]],
				args = 'msg, priority',
				returns = 'nil',
			},
			RecvSkirmishAIMessage = {
				type = 'method',
				description = [[??? ]],
				args = 'aiTeam, dataStr',
				returns = '???',
			},
			RecvFromSynced = {
				type = 'method',
				description = [[Receives data sent via [ [Lua_System#Synced|SendToUnsynced] ] callout. ]],
				args = '...',
				returns = 'nil',
			},
			Save = {
				type = 'method',
				description = [[Called when a chat command '/save' or '/savegame' is received. The single argument is a userdatum representing the savegame zip file. See [ [Lua_SaveLoad#Save_.28_zip_.29_-.3E_nil|Lua_SaveLoad] ]. ]],
				args = 'zip',
				returns = 'nil',
			},
			LoadProgress = {
				type = 'method',
				description = [[Only available to LuaIntro. ]],
				args = 'message, replaceLastLine',
				returns = 'nil',
			},
			GroupChanged = {
				type = 'method',
				description = [[Called when a unit is added to or removed from a control group. Currently implemented for widgets only. ]],
				args = 'groupID',
				returns = 'nil',
			},
			ConfigureLayout = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = '???',
			},
			IsAbove = {
				type = 'method',
				description = [[Called every Update. Must return {{value|true}} for {{name|Mouse*}} events and {{name|GetToolTip}} to be called. ]],
				args = 'x, y',
				returns = 'bool isAbove',
			},
			GetTooltip = {
				type = 'method',
				description = [[Called when {{name|IsAbove}} returns {{value|true}}. ]],
				args = 'x, y',
				returns = 'string tooltip',
			},
			KeyPress = {
				type = 'method',
				description = [[Called repeatedly when a key is pressed down. If you want an action to occur only once check for {{var|1=isRepeat == {{value|false}}}}. The {{var|mods}} parameter is a table, with keys {{value|"alt"}}, {{value|"ctrl"}}, {{value|"meta"}} and {{value|"shift"}} each having a boolean value. Return {{value|true}} if you don't want other callins or the engine to also receive this keypress. A list of key codes can be seen at the [https://wiki.libsdl.org/SDLKeycodeLookup SDL wiki]. ]],
				args = 'key, mods, isRepeat',
				returns = 'bool becomeOwner',
			},
			KeyRelease = {
				type = 'method',
				description = [[Called when the key is released. ]],
				args = 'key',
				returns = 'bool',
			},
			TextInput = {
				type = 'method',
				description = [[Called whenever a key press results in text input. Introduced in 97.0. ]],
				args = 'utf8char',
				returns = 'nil',
			},
			JoystickEvent = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			MousePress = {
				type = 'method',
				description = [[Called when a mouse button is pressed. The {{var|button}} parameter supports up to 7 buttons. Must return {{value|true}} for {{name|MouseRelease}} and other functions to be called. ]],
				args = 'x, y, button',
				returns = 'bool becomeMouseOwner',
			},
			MouseRelease = {
				type = 'method',
				description = [[Called when a mouse button is released. Please note that in order to have Spring call {{name|MouseRelease}}, you need to have a {{name|MousePress}} call-in in the same addon that returns {{value|true}}. ]],
				args = 'x, y, button',
				returns = 'bool becomeMouseOwner',
			},
			MouseWheel = {
				type = 'method',
				description = [[Called when the mouse wheel is moved. The parameters indicate the direction and amount of travel. ]],
				args = 'up, value',
				returns = 'nil',
			},
			MouseMove = {
				type = 'method',
				description = [[Called when the mouse is moved. The {{var|dx}} and {{var|dy}} parameters indicate the distance travelled, whereas the first two indicate the final position. ]],
				args = 'x, y, dx, dy, button',
				returns = 'nil',
			},
			PlayerChanged = {
				type = 'method',
				description = [[Called whenever a player's status changes e.g. becoming a spectator. ]],
				args = 'playerID',
				returns = 'nil',
			},
			PlayerAdded = {
				type = 'method',
				description = [[Called whenever a new player joins the game. ]],
				args = 'playerID',
				returns = 'nil',
			},
			PlayerRemoved = {
				type = 'method',
				description = [[Called whenever a player is removed from the game. ]],
				args = 'playerID, reason',
				returns = 'nil',
			},
			DownloadStarted = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download is started via [ [Lua_VFS#Archives|VFS.DownloadArchive] ]. ]],
				args = 'id',
				returns = 'nil',
			},
			DownloadFinished = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download finishes successfully. ]],
				args = 'id',
				returns = 'nil',
			},
			DownloadFailed = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download fails to complete. ]],
				args = 'id, errorID',
				returns = 'nil',
			},
			DownloadProgress = {
				type = 'method',
				description = [[Called incrementally during a [ [Pr-downloader] ] download. ]],
				args = 'id, downloaded, total',
				returns = 'nil',
			},
			ViewResize = {
				type = 'method',
				description = [[Called whenever the window is resized. ]],
				args = 'viewSizeX, viewSizeY',
				returns = 'nil',
			},
			Update = {
				type = 'method',
				description = [[Called for every draw frame (including when the game is paused) and at least once per sim frame except when catching up. The parameter is the time since the last update. ]],
				args = 'dt',
				returns = 'nil',
			},
			DrawGenesis = {
				type = 'method',
				description = [[Doesn't render to screen! Use this callin to update textures, shaders, etc. Also available to LuaMenu. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldPreParticles = {
				type = 'method',
				description = [[??? {{new|104.0}} ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldPreUnit = {
				type = 'method',
				description = [[Spring draws units, features, some water types, cloaked units, and the sun. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorld = {
				type = 'method',
				description = [[Spring draws command queues, 'map stuff', and map marks. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldShadow = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldReflection = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldRefraction = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPreForward = {
				type = 'method',
				description = [[Runs at the start of the forward pass when a custom map shader has been assigned via [ [Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}] ] (convenient for setting uniforms). ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPreDeferred = {
				type = 'method',
				description = [[Runs at the start of the deferred pass when a custom map shader has been assigned via [ [Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}] ] (convenient for setting uniforms). ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPostDeferred = {
				type = 'method',
				description = [[This runs at the end of its respective deferred pass and allows proper frame compositing (with ground flashes/decals/foliage/etc, which are drawn between it and [ [#API:DrawWorldPreUnit|{{name|DrawWorldPreUnit}}] ]) via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]. ]],
				args = '',
				returns = 'nil',
			},
			DrawUnitsPostDeferred = {
				type = 'method',
				description = [[Runs at the end of the unit deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [ [#API:DrawWorld|{{name|DrawWorld}}] ] via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled. ]],
				args = '',
				returns = 'nil',
			},
			DrawFeaturesPostDeferred = {
				type = 'method',
				description = [[Runs at the end of the feature deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [ [#API:DrawWorld|{{name|DrawWorld}}] ] via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled. ]],
				args = '',
				returns = 'nil',
			},
			DrawScreen = {
				type = 'method',
				description = [[??? Also available to LuaMenu. ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawScreenEffects = {
				type = 'method',
				description = [[Where {{var|vsx}}, {{var|vsy}} are screen coordinates. ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawScreenPost = {
				type = 'method',
				description = [[{{new|104.0}} Similar to {{name|DrawScreenEffects}}, this can be used to alter the contents of a frame after it has been completely rendered (i.e. World, MiniMap, Menu, UI). ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawLoadScreen = {
				type = 'method',
				description = [[{{new|95.0}} Only available to LuaIntro, draws custom load screens. ]],
				args = '',
				returns = 'nil',
			},
			DrawInMinimap = {
				type = 'method',
				description = [[Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale. ]],
				args = 'sx, sy',
				returns = 'nil',
			},
			DrawInMinimapBackground = {
				type = 'method',
				description = [[Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale. ]],
				args = 'sx, sy',
				returns = 'nil',
			},
			DrawUnit = {
				type = 'method',
				description = [[For custom rendering of units, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'unitID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawFeature = {
				type = 'method',
				description = [[For custom rendering of features, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'unitID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawShield = {
				type = 'method',
				description = [[For custom rendering of [ [Gamedev:WeaponDefs#Shield_(WeaponType)|shields] ]. ]],
				args = 'unitID, weaponID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawProjectile = {
				type = 'method',
				description = [[For custom rendering of weapon (& other) projectiles, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'projectileID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			AllowDraw = {
				type = 'method',
				description = [[Enables Draw{Genesis,Screen,ScreenPost} callins if {{value|true}} is returned, otherwise they are called once every 30 seconds. Only active when a game isn't running. ]],
				args = '',
				returns = 'bool allowDraw',
			},
			ActivateMenu = {
				type = 'method',
				description = [[Called whenever LuaMenu is on with no game loaded. ]],
				args = '',
				returns = 'nil',
			},
			ActivateGame = {
				type = 'method',
				description = [[Called whenever LuaMenu is on with a game loaded. ]],
				args = '',
				returns = 'nil',
			},
			GotChatMsg = {
				type = 'method',
				description = [[Called when a player issues a UI command e.g. types {{var|/foo}} or {{var|/luarules foo}}. ]],
				args = 'msg, player',
				returns = 'nil',
			},
			GameID = {
				type = 'method',
				description = [[Called once to deliver the {{var|gameID}}. As of 101.0+ the string is encoded in hex. ]],
				args = 'gameID',
				returns = 'nil',
			},
			GamePaused = {
				type = 'method',
				description = [[Called when the game is paused. ]],
				args = '',
				returns = 'nil',
			},
			GameOver = {
				type = 'method',
				description = [[The parameter is a table list of winning allyTeams, if empty the game result was undecided (like when dropping from an host). ]],
				args = 'winningAllyTeams',
				returns = 'nil',
			},
			GameFrame = {
				type = 'method',
				description = [[Called for every game simulation frame (30 per second). Starts at frame {{value|0}} in 101.0+ and {{value|1}} in previous versions. ]],
				args = 'frame',
				returns = 'nil',
			},
			GamePreload = {
				type = 'method',
				description = [[Called before the 0 gameframe. From 104.0 onwards, will not be called when a saved game is loaded. ]],
				args = '',
				returns = 'nil',
			},
			GameStart = {
				type = 'method',
				description = [[Called upon the start of the game. From 104.0 onwards, will not be called when a saved game is loaded. ]],
				args = '',
				returns = 'nil',
			},
			TeamChanged = {
				type = 'method',
				description = [[??? ]],
				args = 'teamID',
				returns = 'nil',
			},
			TeamDied = {
				type = 'method',
				description = [[Called when a team dies (see [ [Lua_SyncedCtrl#Game_End|Spring.KillTeam] ]). ]],
				args = 'teamID',
				returns = 'nil',
			},
			UnitCreated = {
				type = 'method',
				description = [[Called at the moment the unit is created. ]],
				args = 'unitID, unitDefID, unitTeam, builderID',
				returns = 'nil',
			},
			UnitFinished = {
				type = 'method',
				description = [[Called at the moment the unit is completed. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitFromFactory = {
				type = 'method',
				description = [[Called when a factory finishes construction of a unit. ]],
				args = 'unitID, unitDefID, unitTeam, factID, factDefID, userOrders',
				returns = 'nil',
			},
			UnitReverseBuilt = {
				type = 'method',
				description = [[Called when a living unit becomes a nanoframe again. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitGiven = {
				type = 'method',
				description = [[Called when a unit is transferred between teams. This is called after {{name|UnitTaken}} and in that moment unit is assigned to the '''newTeam'''. ]],
				args = 'unitID, unitDefID, newTeam, oldTeam',
				returns = 'nil',
			},
			UnitTaken = {
				type = 'method',
				description = [[Called when a unit is transferred between teams. This is called before {{name|UnitGiven}} and in that moment unit is still assigned to the '''oldTeam'''. ]],
				args = 'unitID, unitDefID, oldTeam, newTeam',
				returns = 'nil',
			},
			UnitDamaged = {
				type = 'method',
				description = [[Called when a unit is damaged (after {{name|UnitPreDamaged}}). ]],
				args = 'unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			UnitDestroyed = {
				type = 'method',
				description = [[Called when a unit is destroyed. ]],
				args = 'unitID, unitDefID, unitTeam, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			RenderUnitDestroyed = {
				type = 'method',
				description = [[Called just before a unit is invalid, after it finishes its death animation. {{new|101.0}} ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitStunned = {
				type = 'method',
				description = [[Called when a unit changes its stun status. {{new|99.0}} ]],
				args = 'unitID, unitDefID, unitTeam, stunned',
				returns = 'nil',
			},
			UnitUnitCollision = {
				type = 'method',
				description = [[Called when two units collide. Both units must be registered with [ [Lua_System#Synced|Script.SetWatchUnit] ]. ]],
				args = 'colliderID, collideeID',
				returns = 'nil',
			},
			UnitFeatureCollision = {
				type = 'method',
				description = [[Called when a unit collides with a feature. The unit must be registered with [ [Lua_System#Synced|Script.SetWatchUnit] ] and the feature registered with [ [Lua_System#Synced|Script.SetWatchFeature] ]. ]],
				args = 'colliderID, collideeID',
				returns = 'nil',
			},
			UnitHarvestStorageFull = {
				type = 'method',
				description = [[Called when a unit's harvestStorage is full (according to its unitDef's entry). ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitCommand = {
				type = 'method',
				description = [[Called after when a unit accepts a command, after {{name|AllowCommand}} returns {{value|true}}. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag',
				returns = 'nil',
			},
			UnitCmdDone = {
				type = 'method',
				description = [[Called when a unit completes a command. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag',
				returns = 'nil',
			},
			UnitLoaded = {
				type = 'method',
				description = [[Called when a unit is loaded by a transport. ]],
				args = 'unitID, unitDefID, unitTeam, transportID, transportTeam',
				returns = 'nil',
			},
			UnitUnloaded = {
				type = 'method',
				description = [[Called when a unit is unloaded by a transport. ]],
				args = 'unitID, unitDefID, unitTeam, transportID, transportTeam',
				returns = 'nil',
			},
			UnitExperience = {
				type = 'method',
				description = [[Called when a unit gains experience greater or equal to the minimum limit set by calling [ [Lua_SyncedCtrl#Other|Spring.SetExperienceGrade] ]. Should be called more reliably with small values of experience grade in 104.0+. ]],
				args = 'unitID, unitDefID, unitTeam, experience, oldExperience',
				returns = 'nil',
			},
			UnitIdle = {
				type = 'method',
				description = [[Called when a unit is idle (empty command queue). ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitCloaked = {
				type = 'method',
				description = [[Called when a unit cloaks. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitDecloaked = {
				type = 'method',
				description = [[Called when a unit decloaks. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitMoved = {
				type = 'method',
				description = [[??? Not implemented in base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitMoveFailed = {
				type = 'method',
				description = [[??? Not implemented in base handler ]],
				args = '???',
				returns = 'nil',
			},
			StockpileChanged = {
				type = 'method',
				description = [[Called when a units stockpile of weapons increases or decreases. See {{xtaglink|Gamedev:WeaponDefs|stockpile}}. ]],
				args = 'unitID, unitDefID, unitTeam, weaponNum, oldCount, newCount',
				returns = 'nil',
			},
			UnitEnteredLos = {
				type = 'method',
				description = [[Called when a unit enters LOS of an allyteam. Its called after the unit is in LOS, so you can query that unit. The allyTeam is who's LOS the unit entered. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitLeftLos = {
				type = 'method',
				description = [[Called when a unit leaves LOS of an allyteam. For widgets, this one is called just before the unit leaves los, so you can still get the position of a unit that left los. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitEnteredRadar = {
				type = 'method',
				description = [[Called when a unit enters radar of an allyteam. Also called when a unit enters LOS without any radar coverage. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitLeftRadar = {
				type = 'method',
				description = [[Called when a unit leaves radar of an allyteam. Also called when a unit leaves LOS without any radar coverage. For widgets, this is called just after a unit leaves radar coverage, so widgets cannot get the position of units that left their radar. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitEnteredAir = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitLeftAir = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitEnteredWater = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitLeftWater = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitSeismicPing = {
				type = 'method',
				description = [[Called when a unit emits a seismic ping. See {{xtaglink|Gamedev:UnitDefs|seismicSignature}}. ]],
				args = 'x, y, z, strength, allyTeam, unitID, unitDefID',
				returns = 'nil',
			},
			FeatureCreated = {
				type = 'method',
				description = [[Called when a feature is created. ]],
				args = 'featureID, allyTeamID',
				returns = 'nil',
			},
			FeatureDamaged = {
				type = 'method',
				description = [[Called when a feature is damaged. ]],
				args = 'featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			FeatureDestroyed = {
				type = 'method',
				description = [[Called when a feature is destroyed. ]],
				args = 'featureID, allyTeamID',
				returns = 'nil',
			},
			FeatureMoved = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			ProjectileCreated = {
				type = 'method',
				description = [[Called when the projectile is created. Note that {{var|weaponDefID}} is missing if the projectile is spawned as part of a burst, but [ [Lua_SyncedRead#Projectiles|Spring.GetProjectileDefID] ] and [ [Lua_SyncedRead#Projectiles|Spring.GetProjectileName] ] still work in callin scope using {{var|proID}}. ]],
				args = 'proID, proOwnerID, weaponDefID',
				returns = 'nil',
			},
			ProjectileDestroyed = {
				type = 'method',
				description = [[Called when the projectile is destroyed. ]],
				args = 'proID',
				returns = 'nil',
			},
			CommandFallback = {
				type = 'method',
				description = [[Called when the unit reaches an unknown command in its queue (i.e. one not handled by the engine). If no addon returns {{var|used}} as {{value|true}} the command is dropped, if an addon returns {{value|true}}, {{value|true}} the command is removed because it's done, with {{value|true}}, {{value|false}} it's kept in the queue and {{name|CommandFallback}} gets called again on the next slowupdate. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag',
				returns = 'bool used, bool finished',
			},
			AllowCommand = {
				type = 'method',
				description = [[Called when the command is given, before the unit's queue is altered. The return value is whether it should be let into the queue. The queue remains untouched when a command is blocked, whether it would be queued or replace the queue. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag, synced',
				returns = 'bool allow',
			},
			AllowUnitCreation = {
				type = 'method',
				description = [[Called just before unit is created, the boolean return value determines whether or not the creation is permitted. ]],
				args = 'unitDefID, builderID, builderTeam, x, y, z, facing',
				returns = 'bool allow',
			},
			AllowUnitTransfer = {
				type = 'method',
				description = [[Called just before a unit is transferred to a different team, the boolean return value determines whether or not the transfer is permitted. ]],
				args = 'unitID, unitDefID, oldTeam, newTeam, capture',
				returns = 'bool allow',
			},
			AllowUnitBuildStep = {
				type = 'method',
				description = [[Called just before a unit progresses its build percentage, the boolean return value determines whether or not the build makes progress. ]],
				args = 'builderID, builderTeam, unitID, unitDefID, part',
				returns = 'bool allow',
			},
			AllowFeatureCreation = {
				type = 'method',
				description = [[Called just before feature is created, the boolean return value determines whether or not the creation is permitted. ]],
				args = 'featureDefID, teamID, x, y, z',
				returns = 'bool allow',
			},
			AllowFeatureBuildStep = {
				type = 'method',
				description = [[Called just before a feature changes its build percentage, the boolean return value determines whether or not the change is permitted. Note that this is also called for resurrecting features, and for refilling features with resources before resurrection. On reclaim the part values are negative, and on refill and ressurect they are positive. Part is the percentage the feature be built or reclaimed per frame. Eg. for a 30 workertime builder, that's a build power of 1 per frame. For a 50 buildtime feature reclaimed by this builder, part will be 100/-50(/1) = -2%, or -0.02 numerically. ]],
				args = 'builderID, builderTeam, featureID, featureDefID, part',
				returns = 'bool allow',
			},
			AllowResourceLevel = {
				type = 'method',
				description = [[Called when a team sets the sharing level of a resource, the boolean return value determines whether or not the sharing level is permitted. ]],
				args = 'teamID, res, level',
				returns = 'bool allow',
			},
			AllowResourceTransfer = {
				type = 'method',
				description = [[Called just before resources are transferred between players, the boolean return value determines whether or not the transfer is permitted. ]],
				args = 'oldTeamID, newTeamID, res, amount',
				returns = 'bool allow',
			},
			AllowStartPosition = {
				type = 'method',
				description = [[{{var|clamped{X,Y,Z}}} are the coordinates clamped into start-boxes, {{var|raw}} is where player tried to place their marker. The {{var|readyState}} can be any one of
* {{value|0}} - player picked a position,
* {{value|1}} - player clicked ready,
* {{value|2}} - player pressed ready OR  the game was force-started (player did not click ready, but is now forcibly readied) or
* {{value|3}} - the player failed to load.
* {{new|95.0}} the default 'failed to choose' start-position is the north-west point of their startbox, or (0,0,0) if they do not have a startbox.
NB: The order of the parameters changed with the addition of {{var|teamID}} in 104.0. Previouly it was:
{{var|clampedX, clampedY, clampedZ, playerID, readyState, rawX, rawY, rawZ}} ]],
				args = 'playerID, teamID, readyState, clampedX, clampedY, clampedZ, rawX, rawY, rawZ',
				returns = 'bool allow',
			},
			AllowDirectUnitControl = {
				type = 'method',
				description = [[Determines if this unit can be controlled directly in FPS view. ]],
				args = 'unitID, unitDefID, unitTeam, playerID',
				returns = 'bool allow',
			},
			AllowWeaponTargetCheck = {
				type = 'method',
				description = [[Determines if this weapon can automatically generate targets itself. See also {{xtaglink|Gamedev:WeaponDefs|commandFire}} weaponDef tag. The {{var|ignoreCheck}} return value was added in 99.0 to allow ignoring the callin i.e. running normal engine check for this weapon. ]],
				args = 'attackerID, attackerWeaponNum, attackerWeaponDefID',
				returns = 'bool allowCheck, bool ignoreCheck',
			},
			AllowWeaponTarget = {
				type = 'method',
				description = [[Controls blocking of a specific target from being considered during a weapon's periodic auto-targeting sweep. The second return value is the new priority for this target (if you don't want to change it, return {{var|defPriority}}). Lower priority targets are targeted first. ]],
				args = 'attackerID, targetID, attackerWeaponNum, attackerWeaponDefID, defPriority',
				returns = 'bool allowed, number newPriority',
			},
			AllowWeaponInterceptTarget = {
				type = 'method',
				description = [[Controls blocking of a specific intercept target from being considered during an {{xtaglink|Gamedev:WeaponDefs|interceptor}} weapon's periodic auto-targeting sweep. Only called for {{var|weaponDefIDs}} registered via [ [Lua_System#Synced|Script.SetWatchWeapon] ]. ]],
				args = 'interceptorUnitID, interceptorWeaponID, targetProjectileID',
				returns = 'bool allowed',
			},
			AllowBuilderHoldFire = {
				type = 'method',
				description = [[{{new|98.0}} {{Sourcelinkhash|5a82d750b89e72024bb0bb62cf05ea257737e0ac}}   Called when a construction unit wants to "use his nano beams".{{var|action}} is one of following:
* {{value|-1}} Build
* {{value|CMD.REPAIR}} Repair
* {{value|CMD.RECLAIM}} Reclaim
* {{value|CMD.RESTORE}} Restore
* {{value|CMD.RESURRECT}} Resurrect
* {{value|CMD.CAPTURE}} Capture ]],
				args = 'unitID, unitDefID, action',
				returns = 'bool actionAllowed',
			},
			Explosion = {
				type = 'method',
				description = [[Called when an explosion occurs. If it returns {{value|true}} then no graphical effects are drawn by the engine for this explosion. ]],
				args = 'weaponDefID, px, py, pz, AttackerID, ProjectileID',
				returns = 'bool noGfx',
			},
			TerraformComplete = {
				type = 'method',
				description = [[Called when pre-building terrain levelling terraforms are completed (c.f. {{xtaglink|Gamedev:UnitDefs|levelGround}}). If the return value is {{value|true}} the current build order is terminated. ]],
				args = 'unitID, unitDefID, unitTeam, buildUnitID, buildUnitDefID, buildUnitTeam',
				returns = 'bool stop',
			},
			MoveCtrlNotify = {
				type = 'method',
				description = [[Enable both [ [Lua_MoveCtrl#Options|Spring.MoveCtrl.SetCollideStop] ] and [ [Lua_MoveCtrl#Options|Spring.MoveCtrl.SetTrackGround] ] to enable this call-in, data was supposed to indicate the type of notification but currently never has a value other than {{value|1}} ("unit hit the ground"). The return value determines whether or not the unit should remain script-controlled ({{value|false}}) or return to engine controlled movement ({{value|true}}). ]],
				args = 'unitID, unitDefID, unitTeam, data',
				returns = 'bool moveCtrlComplete',
			},
			RecvLuaMsg = {
				type = 'method',
				description = [[Receives messages from unsynced sent via [ [Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaRulesMsg] ] or [ [Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaUIMsg] ]. ]],
				args = 'msg, playerID',
				returns = 'nil',
			},
			Load = {
				type = 'method',
				description = [[Called after {{name|GamePreload}} and before {{name|GameStart}}. See [ [Lua_SaveLoad#Load_.28_zip_.29_-.3E_nil|Lua_SaveLoad] ]. ]],
				args = 'zip',
				returns = 'nil',
			},
			UnitPreDamaged = {
				type = 'method',
				description = [[Called before damage is applied to the unit, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied. ]],
				args = 'unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'number newDamage, number impulseMult',
			},
			ShieldPreDamaged = {
				type = 'method',
				description = [[|I recommend looking up the CallIns in Sourcecode, because the Lua-Documentation, generated from the lua handle of them is seriously flawed and not regenerated.|Lua-Handler documented from version|https://github.com/spring/spring/blob/d085e297416bd963ec25eaa3dbf0796ba22a3582/rts/Lua/LuaHandleSynced.h#L106|Actual CallIn: 
 Called before any engine shield-vs-projectile logic executes. If the return value is {{value|true}} the gadget handles the collision event and the engine does not remove the projectile. If the weapon is a hitscan type ([ [Gamedev:WeaponDefs#Tag:weaponType|BeamLaser] ] or [ [Gamedev:WeaponDefs#Tag:weaponType|LightningCanon] ]) then {{var|proID}} is {{value|nil}} and {{var|beamEmitterWeaponNum}} and {{var|beamEmitterUnitID}} are populated instead. The start and hit position arguments are provided from 104.0 onwards. ]],
				args = 'proID, proOwnerID, shieldEmitterWeaponNum, shieldCarrierUnitID, bounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ  proID, shieldCarrier, boolBounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ',
				returns = 'bool handleCollision',
			},
			FeaturePreDamaged = {
				type = 'method',
				description = [[Called before damage is applied to the feature, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied. ]],
				args = 'featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'number newDamage, number impulseMult',
			},
		},
	},
	gadget = {
		type = 'class',
		description = [[The gadget handler, note that synced or unsynced is not available from here ]],
		childs = {
			Initialize = {
				type = 'method',
				description = [[Called when the addon is (re)loaded. ]],
				args = '',
				returns = 'nil',
			},
			Shutdown = {
				type = 'method',
				description = [[Called when the addon or the game is shutdown. ]],
				args = '',
				returns = 'nil',
			},
			DefaultCommand = {
				type = 'method',
				description = [[Used to set the default command when a unit is selected. First parameter is the type of the object pointed at (either "unit or "feature") and the second is its {{var|unitID}} or {{var|featureID}} respectively. ]],
				args = 'type, id',
				returns = 'number cmdID',
			},
			CommandNotify = {
				type = 'method',
				description = [[Called when a command is issued. Returning {{value|true}} deletes the command and does not send it through the network. ]],
				args = 'cmdID, cmdParams, cmdOptions',
				returns = 'bool removeCmd',
			},
			CommandsChanged = {
				type = 'method',
				description = [[Called when the command descriptions changed, e.g. when selecting or deselecting a unit. ]],
				args = 'None',
				returns = '?',
			},
			WorldTooltip = {
				type = 'method',
				description = [[The parameters can be {{value|"unit"}}, {{var|unitID}}; {{value|"feature"}}, {{var|featureID}}; {{value|"ground"}}, {{var|posX}}, {{var|posY}}, {{var|posZ}} or {{value|"selection"}}. ]],
				args = 'ttType, data1, data2, data3',
				returns = 'string newTooltip',
			},
			UnsyncedHeightMapUpdate = {
				type = 'method',
				description = [[Called when the unsynced copy of the height-map is altered. ]],
				args = '???',
				returns = 'nil',
			},
			GameProgress = {
				type = 'method',
				description = [[Called every 60 frames, calculating delta between GameFrame and GameProgress. Can give an ETA about catching up with simulation for mid-game join players. ]],
				args = 'serverFrameNum',
				returns = 'nil',
			},
			GameSetup = {
				type = 'method',
				description = [[??? ]],
				args = 'state, ready, playerStates',
				returns = 'bool success, bool newReady',
			},
			SunChanged = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			AddConsoleLine = {
				type = 'method',
				description = [[Called when text is entered into the console (e.g. Spring.Echo). ]],
				args = 'msg, priority',
				returns = 'nil',
			},
			RecvSkirmishAIMessage = {
				type = 'method',
				description = [[??? ]],
				args = 'aiTeam, dataStr',
				returns = '???',
			},
			RecvFromSynced = {
				type = 'method',
				description = [[Receives data sent via [ [Lua_System#Synced|SendToUnsynced] ] callout. ]],
				args = '...',
				returns = 'nil',
			},
			Save = {
				type = 'method',
				description = [[Called when a chat command '/save' or '/savegame' is received. The single argument is a userdatum representing the savegame zip file. See [ [Lua_SaveLoad#Save_.28_zip_.29_-.3E_nil|Lua_SaveLoad] ]. ]],
				args = 'zip',
				returns = 'nil',
			},
			LoadProgress = {
				type = 'method',
				description = [[Only available to LuaIntro. ]],
				args = 'message, replaceLastLine',
				returns = 'nil',
			},
			GroupChanged = {
				type = 'method',
				description = [[Called when a unit is added to or removed from a control group. Currently implemented for widgets only. ]],
				args = 'groupID',
				returns = 'nil',
			},
			ConfigureLayout = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = '???',
			},
			IsAbove = {
				type = 'method',
				description = [[Called every Update. Must return {{value|true}} for {{name|Mouse*}} events and {{name|GetToolTip}} to be called. ]],
				args = 'x, y',
				returns = 'bool isAbove',
			},
			GetTooltip = {
				type = 'method',
				description = [[Called when {{name|IsAbove}} returns {{value|true}}. ]],
				args = 'x, y',
				returns = 'string tooltip',
			},
			KeyPress = {
				type = 'method',
				description = [[Called repeatedly when a key is pressed down. If you want an action to occur only once check for {{var|1=isRepeat == {{value|false}}}}. The {{var|mods}} parameter is a table, with keys {{value|"alt"}}, {{value|"ctrl"}}, {{value|"meta"}} and {{value|"shift"}} each having a boolean value. Return {{value|true}} if you don't want other callins or the engine to also receive this keypress. A list of key codes can be seen at the [https://wiki.libsdl.org/SDLKeycodeLookup SDL wiki]. ]],
				args = 'key, mods, isRepeat',
				returns = 'bool becomeOwner',
			},
			KeyRelease = {
				type = 'method',
				description = [[Called when the key is released. ]],
				args = 'key',
				returns = 'bool',
			},
			TextInput = {
				type = 'method',
				description = [[Called whenever a key press results in text input. Introduced in 97.0. ]],
				args = 'utf8char',
				returns = 'nil',
			},
			JoystickEvent = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			MousePress = {
				type = 'method',
				description = [[Called when a mouse button is pressed. The {{var|button}} parameter supports up to 7 buttons. Must return {{value|true}} for {{name|MouseRelease}} and other functions to be called. ]],
				args = 'x, y, button',
				returns = 'bool becomeMouseOwner',
			},
			MouseRelease = {
				type = 'method',
				description = [[Called when a mouse button is released. Please note that in order to have Spring call {{name|MouseRelease}}, you need to have a {{name|MousePress}} call-in in the same addon that returns {{value|true}}. ]],
				args = 'x, y, button',
				returns = 'bool becomeMouseOwner',
			},
			MouseWheel = {
				type = 'method',
				description = [[Called when the mouse wheel is moved. The parameters indicate the direction and amount of travel. ]],
				args = 'up, value',
				returns = 'nil',
			},
			MouseMove = {
				type = 'method',
				description = [[Called when the mouse is moved. The {{var|dx}} and {{var|dy}} parameters indicate the distance travelled, whereas the first two indicate the final position. ]],
				args = 'x, y, dx, dy, button',
				returns = 'nil',
			},
			PlayerChanged = {
				type = 'method',
				description = [[Called whenever a player's status changes e.g. becoming a spectator. ]],
				args = 'playerID',
				returns = 'nil',
			},
			PlayerAdded = {
				type = 'method',
				description = [[Called whenever a new player joins the game. ]],
				args = 'playerID',
				returns = 'nil',
			},
			PlayerRemoved = {
				type = 'method',
				description = [[Called whenever a player is removed from the game. ]],
				args = 'playerID, reason',
				returns = 'nil',
			},
			DownloadStarted = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download is started via [ [Lua_VFS#Archives|VFS.DownloadArchive] ]. ]],
				args = 'id',
				returns = 'nil',
			},
			DownloadFinished = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download finishes successfully. ]],
				args = 'id',
				returns = 'nil',
			},
			DownloadFailed = {
				type = 'method',
				description = [[Called when a [ [Pr-downloader] ] download fails to complete. ]],
				args = 'id, errorID',
				returns = 'nil',
			},
			DownloadProgress = {
				type = 'method',
				description = [[Called incrementally during a [ [Pr-downloader] ] download. ]],
				args = 'id, downloaded, total',
				returns = 'nil',
			},
			ViewResize = {
				type = 'method',
				description = [[Called whenever the window is resized. ]],
				args = 'viewSizeX, viewSizeY',
				returns = 'nil',
			},
			Update = {
				type = 'method',
				description = [[Called for every draw frame (including when the game is paused) and at least once per sim frame except when catching up. The parameter is the time since the last update. ]],
				args = 'dt',
				returns = 'nil',
			},
			DrawGenesis = {
				type = 'method',
				description = [[Doesn't render to screen! Use this callin to update textures, shaders, etc. Also available to LuaMenu. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldPreParticles = {
				type = 'method',
				description = [[??? {{new|104.0}} ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldPreUnit = {
				type = 'method',
				description = [[Spring draws units, features, some water types, cloaked units, and the sun. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorld = {
				type = 'method',
				description = [[Spring draws command queues, 'map stuff', and map marks. ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldShadow = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldReflection = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawWorldRefraction = {
				type = 'method',
				description = [[??? ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPreForward = {
				type = 'method',
				description = [[Runs at the start of the forward pass when a custom map shader has been assigned via [ [Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}] ] (convenient for setting uniforms). ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPreDeferred = {
				type = 'method',
				description = [[Runs at the start of the deferred pass when a custom map shader has been assigned via [ [Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}] ] (convenient for setting uniforms). ]],
				args = '',
				returns = 'nil',
			},
			DrawGroundPostDeferred = {
				type = 'method',
				description = [[This runs at the end of its respective deferred pass and allows proper frame compositing (with ground flashes/decals/foliage/etc, which are drawn between it and [ [#API:DrawWorldPreUnit|{{name|DrawWorldPreUnit}}] ]) via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]. ]],
				args = '',
				returns = 'nil',
			},
			DrawUnitsPostDeferred = {
				type = 'method',
				description = [[Runs at the end of the unit deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [ [#API:DrawWorld|{{name|DrawWorld}}] ] via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled. ]],
				args = '',
				returns = 'nil',
			},
			DrawFeaturesPostDeferred = {
				type = 'method',
				description = [[Runs at the end of the feature deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [ [#API:DrawWorld|{{name|DrawWorld}}] ] via [ [Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}] ]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled. ]],
				args = '',
				returns = 'nil',
			},
			DrawScreen = {
				type = 'method',
				description = [[??? Also available to LuaMenu. ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawScreenEffects = {
				type = 'method',
				description = [[Where {{var|vsx}}, {{var|vsy}} are screen coordinates. ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawScreenPost = {
				type = 'method',
				description = [[{{new|104.0}} Similar to {{name|DrawScreenEffects}}, this can be used to alter the contents of a frame after it has been completely rendered (i.e. World, MiniMap, Menu, UI). ]],
				args = 'vsx, vsy',
				returns = 'nil',
			},
			DrawLoadScreen = {
				type = 'method',
				description = [[{{new|95.0}} Only available to LuaIntro, draws custom load screens. ]],
				args = '',
				returns = 'nil',
			},
			DrawInMinimap = {
				type = 'method',
				description = [[Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale. ]],
				args = 'sx, sy',
				returns = 'nil',
			},
			DrawInMinimapBackground = {
				type = 'method',
				description = [[Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale. ]],
				args = 'sx, sy',
				returns = 'nil',
			},
			DrawUnit = {
				type = 'method',
				description = [[For custom rendering of units, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'unitID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawFeature = {
				type = 'method',
				description = [[For custom rendering of features, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'unitID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawShield = {
				type = 'method',
				description = [[For custom rendering of [ [Gamedev:WeaponDefs#Shield_(WeaponType)|shields] ]. ]],
				args = 'unitID, weaponID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			DrawProjectile = {
				type = 'method',
				description = [[For custom rendering of weapon (& other) projectiles, [ [Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here] ]. ]],
				args = 'projectileID, drawMode',
				returns = 'bool suppressEngineDraw',
			},
			AllowDraw = {
				type = 'method',
				description = [[Enables Draw{Genesis,Screen,ScreenPost} callins if {{value|true}} is returned, otherwise they are called once every 30 seconds. Only active when a game isn't running. ]],
				args = '',
				returns = 'bool allowDraw',
			},
			ActivateMenu = {
				type = 'method',
				description = [[Called whenever LuaMenu is on with no game loaded. ]],
				args = '',
				returns = 'nil',
			},
			ActivateGame = {
				type = 'method',
				description = [[Called whenever LuaMenu is on with a game loaded. ]],
				args = '',
				returns = 'nil',
			},
			GotChatMsg = {
				type = 'method',
				description = [[Called when a player issues a UI command e.g. types {{var|/foo}} or {{var|/luarules foo}}. ]],
				args = 'msg, player',
				returns = 'nil',
			},
			GameID = {
				type = 'method',
				description = [[Called once to deliver the {{var|gameID}}. As of 101.0+ the string is encoded in hex. ]],
				args = 'gameID',
				returns = 'nil',
			},
			GamePaused = {
				type = 'method',
				description = [[Called when the game is paused. ]],
				args = '',
				returns = 'nil',
			},
			GameOver = {
				type = 'method',
				description = [[The parameter is a table list of winning allyTeams, if empty the game result was undecided (like when dropping from an host). ]],
				args = 'winningAllyTeams',
				returns = 'nil',
			},
			GameFrame = {
				type = 'method',
				description = [[Called for every game simulation frame (30 per second). Starts at frame {{value|0}} in 101.0+ and {{value|1}} in previous versions. ]],
				args = 'frame',
				returns = 'nil',
			},
			GamePreload = {
				type = 'method',
				description = [[Called before the 0 gameframe. From 104.0 onwards, will not be called when a saved game is loaded. ]],
				args = '',
				returns = 'nil',
			},
			GameStart = {
				type = 'method',
				description = [[Called upon the start of the game. From 104.0 onwards, will not be called when a saved game is loaded. ]],
				args = '',
				returns = 'nil',
			},
			TeamChanged = {
				type = 'method',
				description = [[??? ]],
				args = 'teamID',
				returns = 'nil',
			},
			TeamDied = {
				type = 'method',
				description = [[Called when a team dies (see [ [Lua_SyncedCtrl#Game_End|Spring.KillTeam] ]). ]],
				args = 'teamID',
				returns = 'nil',
			},
			UnitCreated = {
				type = 'method',
				description = [[Called at the moment the unit is created. ]],
				args = 'unitID, unitDefID, unitTeam, builderID',
				returns = 'nil',
			},
			UnitFinished = {
				type = 'method',
				description = [[Called at the moment the unit is completed. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitFromFactory = {
				type = 'method',
				description = [[Called when a factory finishes construction of a unit. ]],
				args = 'unitID, unitDefID, unitTeam, factID, factDefID, userOrders',
				returns = 'nil',
			},
			UnitReverseBuilt = {
				type = 'method',
				description = [[Called when a living unit becomes a nanoframe again. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitGiven = {
				type = 'method',
				description = [[Called when a unit is transferred between teams. This is called after {{name|UnitTaken}} and in that moment unit is assigned to the '''newTeam'''. ]],
				args = 'unitID, unitDefID, newTeam, oldTeam',
				returns = 'nil',
			},
			UnitTaken = {
				type = 'method',
				description = [[Called when a unit is transferred between teams. This is called before {{name|UnitGiven}} and in that moment unit is still assigned to the '''oldTeam'''. ]],
				args = 'unitID, unitDefID, oldTeam, newTeam',
				returns = 'nil',
			},
			UnitDamaged = {
				type = 'method',
				description = [[Called when a unit is damaged (after {{name|UnitPreDamaged}}). ]],
				args = 'unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			UnitDestroyed = {
				type = 'method',
				description = [[Called when a unit is destroyed. ]],
				args = 'unitID, unitDefID, unitTeam, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			RenderUnitDestroyed = {
				type = 'method',
				description = [[Called just before a unit is invalid, after it finishes its death animation. {{new|101.0}} ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitStunned = {
				type = 'method',
				description = [[Called when a unit changes its stun status. {{new|99.0}} ]],
				args = 'unitID, unitDefID, unitTeam, stunned',
				returns = 'nil',
			},
			UnitUnitCollision = {
				type = 'method',
				description = [[Called when two units collide. Both units must be registered with [ [Lua_System#Synced|Script.SetWatchUnit] ]. ]],
				args = 'colliderID, collideeID',
				returns = 'nil',
			},
			UnitFeatureCollision = {
				type = 'method',
				description = [[Called when a unit collides with a feature. The unit must be registered with [ [Lua_System#Synced|Script.SetWatchUnit] ] and the feature registered with [ [Lua_System#Synced|Script.SetWatchFeature] ]. ]],
				args = 'colliderID, collideeID',
				returns = 'nil',
			},
			UnitHarvestStorageFull = {
				type = 'method',
				description = [[Called when a unit's harvestStorage is full (according to its unitDef's entry). ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitCommand = {
				type = 'method',
				description = [[Called after when a unit accepts a command, after {{name|AllowCommand}} returns {{value|true}}. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag',
				returns = 'nil',
			},
			UnitCmdDone = {
				type = 'method',
				description = [[Called when a unit completes a command. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag',
				returns = 'nil',
			},
			UnitLoaded = {
				type = 'method',
				description = [[Called when a unit is loaded by a transport. ]],
				args = 'unitID, unitDefID, unitTeam, transportID, transportTeam',
				returns = 'nil',
			},
			UnitUnloaded = {
				type = 'method',
				description = [[Called when a unit is unloaded by a transport. ]],
				args = 'unitID, unitDefID, unitTeam, transportID, transportTeam',
				returns = 'nil',
			},
			UnitExperience = {
				type = 'method',
				description = [[Called when a unit gains experience greater or equal to the minimum limit set by calling [ [Lua_SyncedCtrl#Other|Spring.SetExperienceGrade] ]. Should be called more reliably with small values of experience grade in 104.0+. ]],
				args = 'unitID, unitDefID, unitTeam, experience, oldExperience',
				returns = 'nil',
			},
			UnitIdle = {
				type = 'method',
				description = [[Called when a unit is idle (empty command queue). ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitCloaked = {
				type = 'method',
				description = [[Called when a unit cloaks. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitDecloaked = {
				type = 'method',
				description = [[Called when a unit decloaks. ]],
				args = 'unitID, unitDefID, unitTeam',
				returns = 'nil',
			},
			UnitMoved = {
				type = 'method',
				description = [[??? Not implemented in base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitMoveFailed = {
				type = 'method',
				description = [[??? Not implemented in base handler ]],
				args = '???',
				returns = 'nil',
			},
			StockpileChanged = {
				type = 'method',
				description = [[Called when a units stockpile of weapons increases or decreases. See {{xtaglink|Gamedev:WeaponDefs|stockpile}}. ]],
				args = 'unitID, unitDefID, unitTeam, weaponNum, oldCount, newCount',
				returns = 'nil',
			},
			UnitEnteredLos = {
				type = 'method',
				description = [[Called when a unit enters LOS of an allyteam. Its called after the unit is in LOS, so you can query that unit. The allyTeam is who's LOS the unit entered. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitLeftLos = {
				type = 'method',
				description = [[Called when a unit leaves LOS of an allyteam. For widgets, this one is called just before the unit leaves los, so you can still get the position of a unit that left los. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitEnteredRadar = {
				type = 'method',
				description = [[Called when a unit enters radar of an allyteam. Also called when a unit enters LOS without any radar coverage. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitLeftRadar = {
				type = 'method',
				description = [[Called when a unit leaves radar of an allyteam. Also called when a unit leaves LOS without any radar coverage. For widgets, this is called just after a unit leaves radar coverage, so widgets cannot get the position of units that left their radar. ]],
				args = 'unitID, unitTeam, allyTeam, unitDefID',
				returns = 'nil',
			},
			UnitEnteredAir = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitLeftAir = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitEnteredWater = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitLeftWater = {
				type = 'method',
				description = [[??? Not implemented by base handler ]],
				args = '???',
				returns = 'nil',
			},
			UnitSeismicPing = {
				type = 'method',
				description = [[Called when a unit emits a seismic ping. See {{xtaglink|Gamedev:UnitDefs|seismicSignature}}. ]],
				args = 'x, y, z, strength, allyTeam, unitID, unitDefID',
				returns = 'nil',
			},
			FeatureCreated = {
				type = 'method',
				description = [[Called when a feature is created. ]],
				args = 'featureID, allyTeamID',
				returns = 'nil',
			},
			FeatureDamaged = {
				type = 'method',
				description = [[Called when a feature is damaged. ]],
				args = 'featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'nil',
			},
			FeatureDestroyed = {
				type = 'method',
				description = [[Called when a feature is destroyed. ]],
				args = 'featureID, allyTeamID',
				returns = 'nil',
			},
			FeatureMoved = {
				type = 'method',
				description = [[??? ]],
				args = '???',
				returns = 'nil',
			},
			ProjectileCreated = {
				type = 'method',
				description = [[Called when the projectile is created. Note that {{var|weaponDefID}} is missing if the projectile is spawned as part of a burst, but [ [Lua_SyncedRead#Projectiles|Spring.GetProjectileDefID] ] and [ [Lua_SyncedRead#Projectiles|Spring.GetProjectileName] ] still work in callin scope using {{var|proID}}. ]],
				args = 'proID, proOwnerID, weaponDefID',
				returns = 'nil',
			},
			ProjectileDestroyed = {
				type = 'method',
				description = [[Called when the projectile is destroyed. ]],
				args = 'proID',
				returns = 'nil',
			},
			CommandFallback = {
				type = 'method',
				description = [[Called when the unit reaches an unknown command in its queue (i.e. one not handled by the engine). If no addon returns {{var|used}} as {{value|true}} the command is dropped, if an addon returns {{value|true}}, {{value|true}} the command is removed because it's done, with {{value|true}}, {{value|false}} it's kept in the queue and {{name|CommandFallback}} gets called again on the next slowupdate. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag',
				returns = 'bool used, bool finished',
			},
			AllowCommand = {
				type = 'method',
				description = [[Called when the command is given, before the unit's queue is altered. The return value is whether it should be let into the queue. The queue remains untouched when a command is blocked, whether it would be queued or replace the queue. ]],
				args = 'unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag, synced',
				returns = 'bool allow',
			},
			AllowUnitCreation = {
				type = 'method',
				description = [[Called just before unit is created, the boolean return value determines whether or not the creation is permitted. ]],
				args = 'unitDefID, builderID, builderTeam, x, y, z, facing',
				returns = 'bool allow',
			},
			AllowUnitTransfer = {
				type = 'method',
				description = [[Called just before a unit is transferred to a different team, the boolean return value determines whether or not the transfer is permitted. ]],
				args = 'unitID, unitDefID, oldTeam, newTeam, capture',
				returns = 'bool allow',
			},
			AllowUnitBuildStep = {
				type = 'method',
				description = [[Called just before a unit progresses its build percentage, the boolean return value determines whether or not the build makes progress. ]],
				args = 'builderID, builderTeam, unitID, unitDefID, part',
				returns = 'bool allow',
			},
			AllowFeatureCreation = {
				type = 'method',
				description = [[Called just before feature is created, the boolean return value determines whether or not the creation is permitted. ]],
				args = 'featureDefID, teamID, x, y, z',
				returns = 'bool allow',
			},
			AllowFeatureBuildStep = {
				type = 'method',
				description = [[Called just before a feature changes its build percentage, the boolean return value determines whether or not the change is permitted. Note that this is also called for resurrecting features, and for refilling features with resources before resurrection. On reclaim the part values are negative, and on refill and ressurect they are positive. Part is the percentage the feature be built or reclaimed per frame. Eg. for a 30 workertime builder, that's a build power of 1 per frame. For a 50 buildtime feature reclaimed by this builder, part will be 100/-50(/1) = -2%, or -0.02 numerically. ]],
				args = 'builderID, builderTeam, featureID, featureDefID, part',
				returns = 'bool allow',
			},
			AllowResourceLevel = {
				type = 'method',
				description = [[Called when a team sets the sharing level of a resource, the boolean return value determines whether or not the sharing level is permitted. ]],
				args = 'teamID, res, level',
				returns = 'bool allow',
			},
			AllowResourceTransfer = {
				type = 'method',
				description = [[Called just before resources are transferred between players, the boolean return value determines whether or not the transfer is permitted. ]],
				args = 'oldTeamID, newTeamID, res, amount',
				returns = 'bool allow',
			},
			AllowStartPosition = {
				type = 'method',
				description = [[{{var|clamped{X,Y,Z}}} are the coordinates clamped into start-boxes, {{var|raw}} is where player tried to place their marker. The {{var|readyState}} can be any one of
* {{value|0}} - player picked a position,
* {{value|1}} - player clicked ready,
* {{value|2}} - player pressed ready OR  the game was force-started (player did not click ready, but is now forcibly readied) or
* {{value|3}} - the player failed to load.
* {{new|95.0}} the default 'failed to choose' start-position is the north-west point of their startbox, or (0,0,0) if they do not have a startbox.
NB: The order of the parameters changed with the addition of {{var|teamID}} in 104.0. Previouly it was:
{{var|clampedX, clampedY, clampedZ, playerID, readyState, rawX, rawY, rawZ}} ]],
				args = 'playerID, teamID, readyState, clampedX, clampedY, clampedZ, rawX, rawY, rawZ',
				returns = 'bool allow',
			},
			AllowDirectUnitControl = {
				type = 'method',
				description = [[Determines if this unit can be controlled directly in FPS view. ]],
				args = 'unitID, unitDefID, unitTeam, playerID',
				returns = 'bool allow',
			},
			AllowWeaponTargetCheck = {
				type = 'method',
				description = [[Determines if this weapon can automatically generate targets itself. See also {{xtaglink|Gamedev:WeaponDefs|commandFire}} weaponDef tag. The {{var|ignoreCheck}} return value was added in 99.0 to allow ignoring the callin i.e. running normal engine check for this weapon. ]],
				args = 'attackerID, attackerWeaponNum, attackerWeaponDefID',
				returns = 'bool allowCheck, bool ignoreCheck',
			},
			AllowWeaponTarget = {
				type = 'method',
				description = [[Controls blocking of a specific target from being considered during a weapon's periodic auto-targeting sweep. The second return value is the new priority for this target (if you don't want to change it, return {{var|defPriority}}). Lower priority targets are targeted first. ]],
				args = 'attackerID, targetID, attackerWeaponNum, attackerWeaponDefID, defPriority',
				returns = 'bool allowed, number newPriority',
			},
			AllowWeaponInterceptTarget = {
				type = 'method',
				description = [[Controls blocking of a specific intercept target from being considered during an {{xtaglink|Gamedev:WeaponDefs|interceptor}} weapon's periodic auto-targeting sweep. Only called for {{var|weaponDefIDs}} registered via [ [Lua_System#Synced|Script.SetWatchWeapon] ]. ]],
				args = 'interceptorUnitID, interceptorWeaponID, targetProjectileID',
				returns = 'bool allowed',
			},
			AllowBuilderHoldFire = {
				type = 'method',
				description = [[{{new|98.0}} {{Sourcelinkhash|5a82d750b89e72024bb0bb62cf05ea257737e0ac}}   Called when a construction unit wants to "use his nano beams".{{var|action}} is one of following:
* {{value|-1}} Build
* {{value|CMD.REPAIR}} Repair
* {{value|CMD.RECLAIM}} Reclaim
* {{value|CMD.RESTORE}} Restore
* {{value|CMD.RESURRECT}} Resurrect
* {{value|CMD.CAPTURE}} Capture ]],
				args = 'unitID, unitDefID, action',
				returns = 'bool actionAllowed',
			},
			Explosion = {
				type = 'method',
				description = [[Called when an explosion occurs. If it returns {{value|true}} then no graphical effects are drawn by the engine for this explosion. ]],
				args = 'weaponDefID, px, py, pz, AttackerID, ProjectileID',
				returns = 'bool noGfx',
			},
			TerraformComplete = {
				type = 'method',
				description = [[Called when pre-building terrain levelling terraforms are completed (c.f. {{xtaglink|Gamedev:UnitDefs|levelGround}}). If the return value is {{value|true}} the current build order is terminated. ]],
				args = 'unitID, unitDefID, unitTeam, buildUnitID, buildUnitDefID, buildUnitTeam',
				returns = 'bool stop',
			},
			MoveCtrlNotify = {
				type = 'method',
				description = [[Enable both [ [Lua_MoveCtrl#Options|Spring.MoveCtrl.SetCollideStop] ] and [ [Lua_MoveCtrl#Options|Spring.MoveCtrl.SetTrackGround] ] to enable this call-in, data was supposed to indicate the type of notification but currently never has a value other than {{value|1}} ("unit hit the ground"). The return value determines whether or not the unit should remain script-controlled ({{value|false}}) or return to engine controlled movement ({{value|true}}). ]],
				args = 'unitID, unitDefID, unitTeam, data',
				returns = 'bool moveCtrlComplete',
			},
			RecvLuaMsg = {
				type = 'method',
				description = [[Receives messages from unsynced sent via [ [Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaRulesMsg] ] or [ [Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaUIMsg] ]. ]],
				args = 'msg, playerID',
				returns = 'nil',
			},
			Load = {
				type = 'method',
				description = [[Called after {{name|GamePreload}} and before {{name|GameStart}}. See [ [Lua_SaveLoad#Load_.28_zip_.29_-.3E_nil|Lua_SaveLoad] ]. ]],
				args = 'zip',
				returns = 'nil',
			},
			UnitPreDamaged = {
				type = 'method',
				description = [[Called before damage is applied to the unit, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied. ]],
				args = 'unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'number newDamage, number impulseMult',
			},
			ShieldPreDamaged = {
				type = 'method',
				description = [[|I recommend looking up the CallIns in Sourcecode, because the Lua-Documentation, generated from the lua handle of them is seriously flawed and not regenerated.|Lua-Handler documented from version|https://github.com/spring/spring/blob/d085e297416bd963ec25eaa3dbf0796ba22a3582/rts/Lua/LuaHandleSynced.h#L106|Actual CallIn: 
 Called before any engine shield-vs-projectile logic executes. If the return value is {{value|true}} the gadget handles the collision event and the engine does not remove the projectile. If the weapon is a hitscan type ([ [Gamedev:WeaponDefs#Tag:weaponType|BeamLaser] ] or [ [Gamedev:WeaponDefs#Tag:weaponType|LightningCanon] ]) then {{var|proID}} is {{value|nil}} and {{var|beamEmitterWeaponNum}} and {{var|beamEmitterUnitID}} are populated instead. The start and hit position arguments are provided from 104.0 onwards. ]],
				args = 'proID, proOwnerID, shieldEmitterWeaponNum, shieldCarrierUnitID, bounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ  proID, shieldCarrier, boolBounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ',
				returns = 'bool handleCollision',
			},
			FeaturePreDamaged = {
				type = 'method',
				description = [[Called before damage is applied to the feature, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied. ]],
				args = 'featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam',
				returns = 'number newDamage, number impulseMult',
			},
		},
	},
	Game = {
		type = 'lib',
		Description = 'Game from Lua_ConstGame',
		childs = {
			version = {
				type = 'value',
				description = [[{{removed|104.0}} Now in [ [Lua_ConstEngine] ] ]],
				valuetype = 'string',
			},
			buildFlags = {
				type = 'value',
				description = [[{{removed|104.0}} Now in [ [Lua_ConstEngine] ] ]],
				valuetype = 'string',
			},
			gameID = {
				type = 'value',
				description = [[Replaced in 89.0 with GameID(string gameID) synced callin ]],
				valuetype = 'number',
			},
			maxUnits = {
				type = 'value',
				valuetype = 'number',
			},
			maxTeams = {
				type = 'value',
				valuetype = 'number',
			},
			maxPlayers = {
				type = 'value',
				valuetype = 'number',
			},
			squareSize = {
				type = 'value',
				description = [[Divide Game.mapSizeX or Game.mapSizeZ by this to get engine's "mapDims" coordinates ]],
				valuetype = 'number',
			},
			gameSpeed = {
				type = 'value',
				valuetype = 'number',
			},
			gameMode = {
				type = 'value',
				description = [[ Removed from version 83.x ]],
				valuetype = 'number',
			},
			startPosType = {
				type = 'value',
				valuetype = 'number',
			},
			commEnds = {
				type = 'value',
				description = [[ Removed from version 83.x ]],
				valuetype = 'bool',
			},
			limitDGun = {
				type = 'value',
				description = [[ Removed from version 83.x ]],
				valuetype = 'bool',
			},
			ghostedBuildings = {
				type = 'value',
				valuetype = 'bool',
			},
			mapChecksum = {
				type = 'value',
				valuetype = 'string',
			},
			modChecksum = {
				type = 'value',
				valuetype = 'string',
			},
			mapDamage = {
				type = 'value',
				valuetype = 'bool',
			},
			mapName = {
				type = 'value',
				valuetype = 'string',
			},
			mapDescription = {
				type = 'value',
				description = [[= string '''Game.mapHumanName''' ]],
				valuetype = 'string',
			},
			mapHardness = {
				type = 'value',
				valuetype = 'number',
			},
			mapX = {
				type = 'value',
				valuetype = 'number',
			},
			mapY = {
				type = 'value',
				valuetype = 'number',
			},
			mapSizeX = {
				type = 'value',
				description = [[  in worldspace/opengl coords. Divide by Game.squareSize to get engine's "mapDims" coordinates ]],
				valuetype = 'number',
			},
			mapSizeZ = {
				type = 'value',
				description = [[  in worldspace/opengl coords. Divide by Game.squareSize to get engine's "mapDims" coordinates ]],
				valuetype = 'number',
			},
			gravity = {
				type = 'value',
				valuetype = 'number',
			},
			tidal = {
				type = 'value',
				valuetype = 'number',
			},
			windMin = {
				type = 'value',
				valuetype = 'number',
			},
			windMax = {
				type = 'value',
				valuetype = 'number',
			},
			extractorRadius = {
				type = 'value',
				valuetype = 'number',
			},
			waterDamage = {
				type = 'value',
				valuetype = 'number',
			},
			envDamageTypes = {
				type = 'value',
				description = [[Containing {def}IDs of environmental-damage sources {{new|104.0}}. ]],
				valuetype = 'table',
			},
			gameName = {
				type = 'value',
				description = [[{{new|95.0}} ]],
				valuetype = 'string',
			},
			gameShortName = {
				type = 'value',
				description = [[{{new|95.0}} ]],
				valuetype = 'string',
			},
			gameVersion = {
				type = 'value',
				description = [[{{new|95.0}} ]],
				valuetype = 'string',
			},
			gameMutator = {
				type = 'value',
				description = [[{{new|95.0}} ]],
				valuetype = 'string',
			},
			gameDesc = {
				type = 'value',
				description = [[{{new|95.0}} ]],
				valuetype = 'string',
			},
			modName = {
				type = 'value',
				description = [[deprecated (it is in contrast to gameName appended with gameVersion!) ]],
				valuetype = 'string',
			},
			modShortName = {
				type = 'value',
				description = [[deprecated ]],
				valuetype = 'string',
			},
			modVersion = {
				type = 'value',
				description = [[deprecated ]],
				valuetype = 'string',
			},
			modMutator = {
				type = 'value',
				description = [[deprecated ]],
				valuetype = 'string',
			},
			modDesc = {
				type = 'value',
				description = [[deprecated ]],
				valuetype = 'string',
			},
			allowTeamColors = {
				type = 'value',
				valuetype = 'bool',
			},
			requireSonarUnderWater = {
				type = 'value',
				valuetype = 'bool',
			},
			transportAir = {
				type = 'value',
				valuetype = 'number',
			},
			transportShip = {
				type = 'value',
				valuetype = 'number',
			},
			transportHover = {
				type = 'value',
				valuetype = 'number',
			},
			transportGround = {
				type = 'value',
				valuetype = 'number',
			},
			fireAtKilled = {
				type = 'value',
				valuetype = 'number',
			},
			fireAtCrashing = {
				type = 'value',
				valuetype = 'number',
			},
			constructionDecay = {
				type = 'value',
				valuetype = 'bool',
			},
			reclaimAllowEnemies = {
				type = 'value',
				valuetype = 'bool',
			},
			reclaimAllowAllies = {
				type = 'value',
				valuetype = 'bool',
			},
			constructionDecayTime = {
				type = 'value',
				valuetype = 'number',
			},
			constructionDecaySpeed = {
				type = 'value',
				valuetype = 'number',
			},
			multiReclaim = {
				type = 'value',
				valuetype = 'number',
			},
			reclaimMethod = {
				type = 'value',
				valuetype = 'number',
			},
			reclaimUnitMethod = {
				type = 'value',
				valuetype = 'number',
			},
			reclaimUnitEnergyCostFactor = {
				type = 'value',
				valuetype = 'number',
			},
			reclaimUnitEfficiency = {
				type = 'value',
				valuetype = 'number',
			},
			reclaimFeatureEnergyCostFactor = {
				type = 'value',
				valuetype = 'number',
			},
			repairEnergyCostFactor = {
				type = 'value',
				valuetype = 'number',
			},
			resurrectEnergyCostFactor = {
				type = 'value',
				valuetype = 'number',
			},
			captureEnergyCostFactor = {
				type = 'value',
				valuetype = 'number',
			},
			springCategories = {
				type = 'value',
				description = [[
example: {
["vtol"]         = 0,  ["special"]      = 1,  ["noweapon"]     = 2,
["notair"]       = 3,  ["notsub"]       = 4,  ["all"]          = 5,
["weapon"]       = 6,  ["notship"]      = 7,  ["notland"]      = 8,
["mobile"]       = 9,  ["kbot"]         = 10, ["antigator"]    = 11,
["tank"]         = 12, ["plant"]        = 13, ["ship"]         = 14,
["antiemg"]      = 15, ["antilaser"]    = 16, ["antiflame"]    = 17,
["underwater"]   = 18, ["hover"]        = 19, ["phib"]         = 20,
["constr"]       = 21, ["strategic"]    = 22, ["commander"]    = 23,
["paral"]        = 24, ["jam"]          = 25, ["mine"]         = 26,
["kamikaze"]     = 27, ["minelayer"]    = 28, ["notstructure"] = 29,
["air"]          = 30
} ]],
				valuetype = 'table',
			},
			armorTypes = {
				type = 'value',
				description = [[(bidirectional)

example: {
[1]  = amphibious,   [2] = anniddm,     [3] = antibomber,
[4]  = antifighter,  [5] = antiraider,  [6] = atl,
[7]  = blackhydra,   [8] = bombers,     [9] = commanders,
[10] = crawlingbombs, ...

["amphibious"]   = 1, ["anniddm"]    = 2, ["antibomber"] = 3
["antifighter"]  = 4, ["antiraider"] = 5, ["atl"]        = 6
["blackhydra"]   = 7, ["bombers"]    = 8, ["commanders"] = 9
["crawlingbombs"]= 10, ...
} ]],
				valuetype = 'table',
			},
			waterVoid = {
				type = 'value',
				valuetype = 'bool',
			},
			waterPlane = {
				type = 'value',
				valuetype = 'bool',
			},
			waterTexture = {
				type = 'value',
				valuetype = 'string',
			},
			waterFoamTexture = {
				type = 'value',
				valuetype = 'string',
			},
			waterNormalTexture = {
				type = 'value',
				valuetype = 'string',
			},
			waterRepeatX = {
				type = 'value',
				valuetype = 'number',
			},
			waterRepeatY = {
				type = 'value',
				valuetype = 'number',
			},
			waterSurfaceAlpha = {
				type = 'value',
				valuetype = 'number',
			},
			waterSpecularFactor = {
				type = 'value',
				valuetype = 'number',
			},
			waterFresnelMin = {
				type = 'value',
				valuetype = 'number',
			},
			waterFresnelMax = {
				type = 'value',
				valuetype = 'number',
			},
			waterFresnelPower = {
				type = 'value',
				valuetype = 'number',
			},
			waterCausticTextures = {
				type = 'value',
				description = [[= {"tex1","tex2",..} ]],
				valuetype = 'table',
			},
			waterAbsorb = {
				type = 'value',
				description = [[= { number r, number g, number b} ]],
				valuetype = 'color',
			},
			waterBaseColor = {
				type = 'value',
				valuetype = 'color',
			},
			waterMinColor = {
				type = 'value',
				valuetype = 'color',
			},
			waterSurfaceColor = {
				type = 'value',
				valuetype = 'color',
			},
			waterSpecularColor = {
				type = 'value',
				valuetype = 'color',
			},
			waterPlaneColor = {
				type = 'value',
				valuetype = 'color',
			},
			fogColor = {
				type = 'value',
				description = [[{{removed|101.0}} (Use gl.GetAtmosphere("fogColor") instead) ]],
				valuetype = 'color',
			},
			groundAmbientColor = {
				type = 'value',
				description = [[{{removed|101.0}} (Use gl.GetSun("ambient") instead) ]],
				valuetype = 'color',
			},
			groundSpecularColor = {
				type = 'value',
				description = [[{{removed|101.0}} (Use gl.GetSun("specular") instead) ]],
				valuetype = 'color',
			},
			groundSunColor = {
				type = 'value',
				description = [[{{removed|101.0}} (Use gl.GetSun("diffuse") instead) ]],
				valuetype = 'color',
			},
		},
	},
	Engine = {
		type = 'lib',
		Description = 'Engine from Lua_ConstEngine',
		childs = {
			version = {
				type = 'value',
				description = [[Returns the same as `spring --sync-version`, e.g. "92" ]],
				valuetype = 'string',
			},
			versionFull = {
				type = 'value',
				valuetype = 'string',
			},
			versionPatchSet = {
				type = 'value',
				valuetype = 'string',
			},
			buildFlags = {
				type = 'value',
				description = [[(unsynced only) Gets additional engine buildflags, e.g. "OMP" or "MT-Sim DEBUG" ]],
				valuetype = 'string',
			},
			wordSize = {
				type = 'value',
				description = [[indicates the build type and is either 32 or 64 (or 0 in synced code) ]],
				valuetype = 'number',
			},
		},
	},
	Platform = {
		type = 'lib',
		Description = 'Platform from Lua_ConstPlatform',
		childs = {
			gpu = {
				type = 'value',
				description = [[full GPU device name ]],
				valuetype = 'string',
			},
			gpuVendor = {
				type = 'value',
				description = [[one of "Nvidia", "Intel", "ATI", "Mesa", "Unknown" ]],
				valuetype = 'string',
			},
			glVersionShort = {
				type = 'value',
				description = [[major.minor.buildNumber ]],
				valuetype = 'string',
			},
			glslVersionShort = {
				type = 'value',
				description = [[major.minor ]],
				valuetype = 'string',
			},
			glVersion = {
				type = 'value',
				description = [[full version ]],
				valuetype = 'string',
			},
			glVendor = {
				type = 'value',
				valuetype = 'string',
			},
			glRenderer = {
				type = 'value',
				valuetype = 'string',
			},
			glslVersion = {
				type = 'value',
				description = [[full version ]],
				valuetype = 'string',
			},
			glewVersion = {
				type = 'value',
				valuetype = 'string',
			},
			osName = {
				type = 'value',
				description = [[full name of the OS ]],
				valuetype = 'string',
			},
			osFamily = {
				type = 'value',
				description = [[one of "Windows", "Linux", "MacOSX", "FreeBSD", "Unknown" ]],
				valuetype = 'string',
			},
			gpuMemorySize = {
				type = 'value',
				description = [[size of total GPU memory in MBs; only available for "Nvidia", (rest are 0) ]],
				valuetype = 'number',
			},
			sdlVersionCompiledMajor = {
				type = 'value',
				valuetype = 'number',
			},
			sdlVersionCompiledMinor = {
				type = 'value',
				valuetype = 'number',
			},
			sdlVersionCompiledPatch = {
				type = 'value',
				valuetype = 'number',
			},
			sdlVersionLinkedMajor = {
				type = 'value',
				valuetype = 'number',
			},
			sdlVersionLinkedMinor = {
				type = 'value',
				valuetype = 'number',
			},
			sdlVersionLinkedPatch = {
				type = 'value',
				valuetype = 'number',
			},
			glSupportNonPowerOfTwoTex = {
				type = 'value',
				valuetype = 'bool',
			},
			glSupportTextureQueryLOD = {
				type = 'value',
				valuetype = 'bool',
			},
			glSupport24bitDepthBuffer = {
				type = 'value',
				valuetype = 'bool',
			},
			glSupportRestartPrimitive = {
				type = 'value',
				valuetype = 'bool',
			},
			glSupportClipSpaceControl = {
				type = 'value',
				valuetype = 'bool',
			},
			glSupportFragDepthLayout = {
				type = 'value',
				valuetype = 'bool',
			},
		},
	},
	SFX = {
		type = 'lib',
		Description = 'SFX from Lua_ConstCOB',
		childs = {
			SHATTER = {
				type = 'value',
				valuetype = 'number',
			},
			EXPLODE = {
				type = 'value',
				valuetype = 'number',
			},
			EXPLODE_ON_HIT = {
				type = 'value',
				valuetype = 'number',
			},
			FALL = {
				type = 'value',
				valuetype = 'number',
			},
			SMOKE = {
				type = 'value',
				valuetype = 'number',
			},
			FIRE = {
				type = 'value',
				valuetype = 'number',
			},
			NONE = {
				type = 'value',
				valuetype = 'number',
			},
			NO_CEG_TRAIL = {
				type = 'value',
				valuetype = 'number',
			},
			NO_HEATCLOUD = {
				type = 'value',
				valuetype = 'number',
			},
			RECURSIVE = {
				type = 'value',
				description = [[{{new|99.0}} ]],
				valuetype = 'number',
			},
			VTOL = {
				type = 'value',
				valuetype = 'number',
			},
			WAKE = {
				type = 'value',
				valuetype = 'number',
			},
			REVERSE_WAKE = {
				type = 'value',
				valuetype = 'number',
			},
			WHITE_SMOKE = {
				type = 'value',
				valuetype = 'number',
			},
			BLACK_SMOKE = {
				type = 'value',
				valuetype = 'number',
			},
			BUBBLE = {
				type = 'value',
				valuetype = 'number',
			},
			CEG = {
				type = 'value',
				valuetype = 'number',
			},
			FIRE_WEAPON = {
				type = 'value',
				valuetype = 'number',
			},
			DETONATE_WEAPON = {
				type = 'value',
				valuetype = 'number',
			},
			GLOBAL = {
				type = 'value',
				valuetype = 'number',
			},
		},
	},
	COB = {
		type = 'lib',
		Description = 'COB from Lua_ConstCOB',
		childs = {
			ACTIVATION = {
				type = 'value',
				valuetype = 'number',
			},
			STANDINGMOVEORDERS = {
				type = 'value',
				valuetype = 'number',
			},
			STANDINGFIREORDERS = {
				type = 'value',
				valuetype = 'number',
			},
			HEALTH = {
				type = 'value',
				valuetype = 'number',
			},
			INBUILDSTANCE = {
				type = 'value',
				valuetype = 'number',
			},
			BUSY = {
				type = 'value',
				valuetype = 'number',
			},
			PIECE_XZ = {
				type = 'value',
				valuetype = 'number',
			},
			PIECE_Y = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_XZ = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_Y = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_HEIGHT = {
				type = 'value',
				valuetype = 'number',
			},
			XZ_ATAN = {
				type = 'value',
				valuetype = 'number',
			},
			XZ_HYPOT = {
				type = 'value',
				valuetype = 'number',
			},
			ATAN = {
				type = 'value',
				valuetype = 'number',
			},
			HYPOT = {
				type = 'value',
				valuetype = 'number',
			},
			GROUND_HEIGHT = {
				type = 'value',
				valuetype = 'number',
			},
			BUILD_PERCENT_LEFT = {
				type = 'value',
				valuetype = 'number',
			},
			YARD_OPEN = {
				type = 'value',
				valuetype = 'number',
			},
			BUGGER_OFF = {
				type = 'value',
				valuetype = 'number',
			},
			ARMORED = {
				type = 'value',
				valuetype = 'number',
			},
			IN_WATER = {
				type = 'value',
				valuetype = 'number',
			},
			CURRENT_SPEED = {
				type = 'value',
				valuetype = 'number',
			},
			VETERAN_LEVEL = {
				type = 'value',
				valuetype = 'number',
			},
			ON_ROAD = {
				type = 'value',
				valuetype = 'number',
			},
			MAX_ID = {
				type = 'value',
				valuetype = 'number',
			},
			MY_ID = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_TEAM = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_BUILD_PERCENT_LEFT = {
				type = 'value',
				valuetype = 'number',
			},
			UNIT_ALLIED = {
				type = 'value',
				valuetype = 'number',
			},
			MAX_SPEED = {
				type = 'value',
				valuetype = 'number',
			},
			CLOAKED = {
				type = 'value',
				valuetype = 'number',
			},
			WANT_CLOAK = {
				type = 'value',
				valuetype = 'number',
			},
			GROUND_WATER_HEIGHT = {
				type = 'value',
				valuetype = 'number',
			},
			UPRIGHT = {
				type = 'value',
				valuetype = 'number',
			},
			POW = {
				type = 'value',
				valuetype = 'number',
			},
			PRINT = {
				type = 'value',
				valuetype = 'number',
			},
			HEADING = {
				type = 'value',
				valuetype = 'number',
			},
			TARGET_ID = {
				type = 'value',
				valuetype = 'number',
			},
			LAST_ATTACKER_ID = {
				type = 'value',
				valuetype = 'number',
			},
			LOS_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			AIR_LOS_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			RADAR_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			JAMMER_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			SONAR_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			SONAR_JAM_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			SEISMIC_RADIUS = {
				type = 'value',
				valuetype = 'number',
			},
			DO_SEISMIC_PING = {
				type = 'value',
				valuetype = 'number',
			},
			CURRENT_FUEL = {
				type = 'value',
				valuetype = 'number',
			},
			TRANSPORT_ID = {
				type = 'value',
				valuetype = 'number',
			},
			SHIELD_POWER = {
				type = 'value',
				valuetype = 'number',
			},
			STEALTH = {
				type = 'value',
				valuetype = 'number',
			},
			CRASHING = {
				type = 'value',
				valuetype = 'number',
			},
			CHANGE_TARGET = {
				type = 'value',
				valuetype = 'number',
			},
			CEG_DAMAGE = {
				type = 'value',
				valuetype = 'number',
			},
			COB_ID = {
				type = 'value',
				valuetype = 'number',
			},
			PLAY_SOUND = {
				type = 'value',
				valuetype = 'number',
			},
			KILL_UNIT = {
				type = 'value',
				valuetype = 'number',
			},
			ALPHA_THRESHOLD = {
				type = 'value',
				valuetype = 'number',
			},
			SET_WEAPON_UNIT_TARGET = {
				type = 'value',
				valuetype = 'number',
			},
			SET_WEAPON_GROUND_TARGET = {
				type = 'value',
				valuetype = 'number',
			},
			SONAR_STEALTH = {
				type = 'value',
				valuetype = 'number',
			},
			REVERSING = {
				type = 'value',
				valuetype = 'number',
			},
			FLANK_B_MODE = {
				type = 'value',
				valuetype = 'number',
			},
			FLANK_B_DIR = {
				type = 'value',
				valuetype = 'number',
			},
			FLANK_B_MOBILITY_ADD = {
				type = 'value',
				valuetype = 'number',
			},
			FLANK_B_MAX_DAMAGE = {
				type = 'value',
				valuetype = 'number',
			},
			FLANK_B_MIN_DAMAGE = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_RELOADSTATE = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_RELOADTIME = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_ACCURACY = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_SPRAY = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_RANGE = {
				type = 'value',
				valuetype = 'number',
			},
			WEAPON_PROJECTILE_SPEED = {
				type = 'value',
				valuetype = 'number',
			},
			MIN = {
				type = 'value',
				valuetype = 'number',
			},
			MAX = {
				type = 'value',
				valuetype = 'number',
			},
			ABS = {
				type = 'value',
				valuetype = 'number',
			},
			GAME_FRAME = {
				type = 'value',
				valuetype = 'number',
			},
		},
	},
}